package com.example.myapplication.ml

import android.content.Context
import android.graphics.Bitmap
import android.util.Log
import org.pytorch.IValue
import org.pytorch.Module
import org.pytorch.Tensor
import org.pytorch.torchvision.TensorImageUtils
import java.io.File
import java.io.IOException

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PyTorch –º–æ–¥–µ–ª—å—é
 */
class PyTorchModel(
    private val context: Context,
    private val modelPath: String,
    private val config: ModelConfig
) : ModelInterface {
    
    companion object {
        private const val TAG = "PyTorchModel"
        private const val INPUT_SIZE = 224
    }
    
    private var model: Module? = null
    
    override fun initialize(): Boolean {
        try {
            Log.i(TAG, "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PyTorch –º–æ–¥–µ–ª–∏...")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ assets
            try {
                context.assets.open(modelPath).use { input ->
                    Log.i(TAG, "‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ assets: $modelPath")
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ assets: $modelPath")
                return false
            }
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            val tempFile = File(context.cacheDir, "omr_model.pt")
            Log.i(TAG, "üìÅ –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${tempFile.absolutePath}")
            
            context.assets.open(modelPath).use { input ->
                tempFile.outputStream().use { output ->
                    input.copyTo(output)
                }
            }
            
            Log.i(TAG, "üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏: ${tempFile.length()} –±–∞–π—Ç")
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            Log.i(TAG, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º PyTorch –º–æ–¥–µ–ª—å...")
            model = Module.load(tempFile.absolutePath)
            
            Log.i(TAG, "‚úÖ PyTorch –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return true
            
        } catch (e: IOException) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PyTorch –º–æ–¥–µ–ª–∏: ${e.message}")
            e.printStackTrace()
            return false
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PyTorch –º–æ–¥–µ–ª–∏: ${e.message}")
            e.printStackTrace()
            return false
        }
    }
    
    override fun predict(bitmap: Bitmap): PredictionResult {
        if (!isReady()) {
            Log.e(TAG, "‚ùå PyTorch –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞")
            return PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f))
        }
        
        try {
            // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            val inputTensor = preprocessImage(bitmap)
            
            // –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            val output = model!!.forward(IValue.from(inputTensor))
            val outputTensor = output.toTensor()
            
            // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            val result = postprocessResults(outputTensor)
            
            return result
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è PyTorch: ${e.message}")
            return PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f))
        }
    }
    
    override fun predictBatch(bitmaps: List<Bitmap>): List<PredictionResult> {
        if (!isReady()) {
            Log.e(TAG, "‚ùå PyTorch –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞")
            return List(bitmaps.size) { 
                PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f)) 
            }
        }
        
        try {
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            val inputTensors = bitmaps.map { preprocessImageOptimized(it) }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–Ω–∑–æ—Ä—ã –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            val results = mutableListOf<PredictionResult>()
            
            for (inputTensor in inputTensors) {
                // –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
                val output = model!!.forward(IValue.from(inputTensor))
                val outputTensor = output.toTensor()
                
                // –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                val result = postprocessResultsOptimized(outputTensor)
                results.add(result)
            }
            
            return results
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è PyTorch: ${e.message}")
            return List(bitmaps.size) { 
                PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f)) 
            }
        }
    }
    
    override fun release() {
        model = null
        Log.i(TAG, "üîß PyTorch –º–æ–¥–µ–ª—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
    }
    
    override fun isReady(): Boolean {
        return model != null
    }
    
    /**
     * –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è PyTorch –º–æ–¥–µ–ª–∏
     */
    private fun preprocessImage(bitmap: Bitmap): Tensor {
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 224x224
        val resizedBitmap = Bitmap.createScaledBitmap(bitmap, INPUT_SIZE, INPUT_SIZE, true)
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ImageNet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        return TensorImageUtils.bitmapToFloat32Tensor(
            resizedBitmap,
            config.mean,
            config.std
        )
    }
    
    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ)
     */
    private fun preprocessImageOptimized(bitmap: Bitmap): Tensor {
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 224x224 (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        val resizedBitmap = if (bitmap.width == INPUT_SIZE && bitmap.height == INPUT_SIZE) {
            bitmap
        } else {
            Bitmap.createScaledBitmap(bitmap, INPUT_SIZE, INPUT_SIZE, true)
        }
        
        return TensorImageUtils.bitmapToFloat32Tensor(
            resizedBitmap,
            config.mean,
            config.std
        )
    }
    
    /**
     * –ü–æ—Å—Ç–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã PyTorch –º–æ–¥–µ–ª–∏
     */
    private fun postprocessResults(outputTensor: Tensor): PredictionResult {
        val outputArray = outputTensor.dataAsFloatArray
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º softmax –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        val probabilities = softmax(outputArray)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        val predictedClass = if (probabilities[1] > probabilities[0]) 1 else 0
        val confidence = probabilities[predictedClass]
        val isFilled = predictedClass == 1
        
        Log.d(TAG, "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${if (isFilled) "–ó–ê–ü–û–õ–ù–ï–ù–û" else "–ü–£–°–¢–û–ï"} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence * 100}%)")
        
        return PredictionResult(
            isFilled = isFilled,
            confidence = confidence,
            probabilities = probabilities
        )
    }
    
    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±—ã—Å—Ç—Ä–µ–µ, –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    private fun postprocessResultsOptimized(outputTensor: Tensor): PredictionResult {
        val outputArray = outputTensor.dataAsFloatArray
        
        // –ë—ã—Å—Ç—Ä—ã–π softmax –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        val maxLogit = maxOf(outputArray[0], outputArray[1])
        val exp0 = Math.exp((outputArray[0] - maxLogit).toDouble())
        val exp1 = Math.exp((outputArray[1] - maxLogit).toDouble())
        val sumExp = exp0 + exp1
        
        val prob0 = (exp0 / sumExp).toFloat()
        val prob1 = (exp1 / sumExp).toFloat()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        val isFilled = prob1 > prob0
        val confidence = if (isFilled) prob1 else prob0
        
        return PredictionResult(
            isFilled = isFilled,
            confidence = confidence,
            probabilities = floatArrayOf(prob0, prob1)
        )
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç softmax –∫ –º–∞—Å—Å–∏–≤—É –∑–Ω–∞—á–µ–Ω–∏–π
     */
    private fun softmax(logits: FloatArray): FloatArray {
        val maxLogit = logits.maxOrNull() ?: 0f
        val expLogits = logits.map { Math.exp((it - maxLogit).toDouble()) }
        val sumExpLogits = expLogits.sum()
        
        return expLogits.map { (it / sumExpLogits).toFloat() }.toFloatArray()
    }
} 