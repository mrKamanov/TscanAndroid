package com.example.myapplication.ml

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Color
import android.util.Log
import ai.onnxruntime.*
import java.io.File
import java.io.IOException
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.FloatBuffer

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ONNX –º–æ–¥–µ–ª—å—é
 */
class OnnxModel(
    private val context: Context,
    private val modelPath: String,
    private val config: ModelConfig
) : ModelInterface {
    
    companion object {
        private const val TAG = "OnnxModel"
        private const val INPUT_SIZE = 224
    }
    
    private var session: OrtSession? = null
    private var environment: OrtEnvironment? = null
    private var inputName: String? = null
    private var outputName: String? = null
    
    // –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    private val preprocessedCache = mutableMapOf<String, FloatArray>()
    
    override fun initialize(): Boolean {
        try {
            Log.i(TAG, "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX –º–æ–¥–µ–ª–∏...")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
            val tempFile = File(context.cacheDir, "omr_model_optimized.onnx")
            if (!tempFile.exists()) {
                Log.i(TAG, "üìÅ –ö–æ–ø–∏—Ä—É–µ–º ONNX –º–æ–¥–µ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...")
                context.assets.open(modelPath).use { input ->
                    tempFile.outputStream().use { output ->
                        input.copyTo(output)
                    }
                }
            }
            
            Log.i(TAG, "üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏: ${tempFile.length()} –±–∞–π—Ç")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ONNX Runtime —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
            environment = OrtEnvironment.getEnvironment()
            val sessionOptions = OrtSession.SessionOptions()
            sessionOptions.setOptimizationLevel(OrtSession.SessionOptions.OptLevel.ALL_OPT)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è CPU –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NNAPI
            sessionOptions.setIntraOpNumThreads(4) // –ò—Å–ø–æ–ª—å–∑—É–µ–º 4 –ø–æ—Ç–æ–∫–∞
            sessionOptions.setInterOpNumThreads(2) // 2 –ø–æ—Ç–æ–∫–∞ –¥–ª—è –º–µ–∂–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            try {
                val providers = OrtEnvironment.getAvailableProviders()
                val providerNames = providers.map { it.name }
                Log.i(TAG, "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: ${providerNames.joinToString(", ")}")
                
                // –î–ª—è Android ONNX Runtime –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                if (providers.contains(OrtProvider.NNAPI)) {
                    // NNAPI –¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    Log.i(TAG, "üöÄ NNAPI —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è NNAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Android
                sessionOptions.setExecutionMode(OrtSession.SessionOptions.ExecutionMode.PARALLEL)
                
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU: ${e.message}")
            }
            
            Log.i(TAG, "üöÄ CPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            session = environment!!.createSession(tempFile.absolutePath, sessionOptions)
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤—Ö–æ–¥–æ–≤ –∏ –≤—ã—Ö–æ–¥–æ–≤
            val inputNames = session!!.inputNames
            val outputNames = session!!.outputNames
            
            inputName = inputNames.iterator().next()
            outputName = outputNames.iterator().next()
            
            Log.i(TAG, "‚úÖ ONNX –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            Log.i(TAG, "üì• –í—Ö–æ–¥: $inputName")
            Log.i(TAG, "üì§ –í—ã—Ö–æ–¥: $outputName")
            
            return true
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ONNX –º–æ–¥–µ–ª–∏: ${e.message}")
            e.printStackTrace()
            return false
        }
    }
    
    override fun predict(bitmap: Bitmap): PredictionResult {
        if (!isReady()) {
            Log.e(TAG, "‚ùå ONNX –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞")
            return PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f))
        }
        
        try {
            // –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            val inputData = preprocessImage(bitmap)

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ NCHW Array –¥–ª—è ONNX
            val inputArray = Array(1) { // batch
                Array(3) { ch ->
                    Array(INPUT_SIZE) { y ->
                        FloatArray(INPUT_SIZE) { x ->
                            inputData[ch * INPUT_SIZE * INPUT_SIZE + y * INPUT_SIZE + x]
                        }
                    }
                }
            }

            // –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä
            val inputTensor = OnnxTensor.createTensor(environment!!, inputArray)

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            val inputs = mapOf(inputName!! to inputTensor)
            val output = session!!.run(inputs)

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            val outputTensor = output[outputName!!].get() as OnnxTensor
            val outputArray = outputTensor.value as Array<FloatArray>
            val probabilities = outputArray[0]

            // –ü–æ—Å—Ç–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return postprocessResults(probabilities)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ONNX –º–æ–¥–µ–ª–∏: ${e.message}")
            e.printStackTrace()
            return PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f))
        }
    }
    
    override fun predictBatch(bitmaps: List<Bitmap>): List<PredictionResult> {
        if (!isReady()) {
            Log.e(TAG, "‚ùå ONNX –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞")
            return List(bitmaps.size) { 
                PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f)) 
            }
        }
        
        val startTime = System.currentTimeMillis()
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞
        val results = bitmaps.map { bitmap ->
            predict(bitmap)
        }
        
        val endTime = System.currentTimeMillis()
        val avgTime = (endTime - startTime) / bitmaps.size.toFloat()
        
        Log.i(TAG, "‚ö° –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ${bitmaps.size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ ${endTime - startTime}–º—Å (—Å—Ä–µ–¥–Ω–µ–µ: ${String.format("%.1f", avgTime)}–º—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
        return results
    }
    
    override fun release() {
        try {
            session?.close()
            environment?.close()
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ ONNX –º–æ–¥–µ–ª–∏: ${e.message}")
        } finally {
            session = null
            environment = null
            inputName = null
            outputName = null
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à
            preprocessedCache.clear()
            
            Log.i(TAG, "üîß ONNX –º–æ–¥–µ–ª—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        }
    }
    
    override fun isReady(): Boolean {
        return session != null && environment != null
    }
    
    /**
     * –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ONNX –º–æ–¥–µ–ª–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private fun preprocessImage(bitmap: Bitmap): FloatArray {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        val cacheKey = bitmap.hashCode().toString()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        preprocessedCache[cacheKey]?.let { cached ->
            return cached
        }
        
        val resizedBitmap = Bitmap.createScaledBitmap(bitmap, INPUT_SIZE, INPUT_SIZE, true)
        val inputData = FloatArray(INPUT_SIZE * INPUT_SIZE * 3)
        
        for (y in 0 until INPUT_SIZE) {
            for (x in 0 until INPUT_SIZE) {
                val pixel = resizedBitmap.getPixel(x, y)
                
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RGB –∑–Ω–∞—á–µ–Ω–∏—è
                val r = (Color.red(pixel) / 255f - config.mean[0]) / config.std[0]
                val g = (Color.green(pixel) / 255f - config.mean[1]) / config.std[1]
                val b = (Color.blue(pixel) / 255f - config.mean[2]) / config.std[2]
                
                // ONNX –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç NCHW (batch, channels, height, width)
                val index = y * INPUT_SIZE + x
                inputData[index] = r
                inputData[index + INPUT_SIZE * INPUT_SIZE] = g
                inputData[index + 2 * INPUT_SIZE * INPUT_SIZE] = b
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞)
        if (preprocessedCache.size < 10) {
            preprocessedCache[cacheKey] = inputData
        }
        
        return inputData
    }
    
    /**
     * –ü–æ—Å—Ç–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ONNX –º–æ–¥–µ–ª–∏
     */
    private fun postprocessResults(probabilities: FloatArray): PredictionResult {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º softmax (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        val maxProb = probabilities.maxOrNull() ?: 0f
        val expProbs = probabilities.map { Math.exp((it - maxProb).toDouble()).toFloat() }
        val sumExp = expProbs.sum()
        val softmaxProbs = expProbs.map { it / sumExp }.toFloatArray()

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        val filledProb = softmaxProbs[1] // –ò–Ω–¥–µ–∫—Å 1 = filled
        val isFilled = filledProb > config.confidenceThreshold

        return PredictionResult(
            isFilled = isFilled,
            confidence = filledProb,
            probabilities = softmaxProbs
        )
    }
} 