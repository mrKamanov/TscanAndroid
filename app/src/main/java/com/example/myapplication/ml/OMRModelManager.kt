package com.example.myapplication.ml

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Color
import android.util.Log
import org.json.JSONObject
import org.pytorch.IValue
import org.pytorch.Module
import org.pytorch.Tensor
import org.pytorch.torchvision.TensorImageUtils
import java.io.File
import java.io.IOException
import java.nio.ByteBuffer
import java.nio.ByteOrder

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OMR –º–æ–¥–µ–ª—è–º–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PyTorch, ONNX –∏ TensorFlow Lite
 */
class OMRModelManager(private val context: Context) {
    
    companion object {
        private const val TAG = "OMRModelManager"
        
        // –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
        private const val PYTORCH_MODEL = "omr_model.pt"
        private const val ONNX_MODEL = "models/omr_model_optimized.onnx"
        private const val TFLITE_MODEL = "models/omr_model.tflite"
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        private const val OLD_CONFIG_FILE = "model_config.json"
        private const val NEW_CONFIG_FILE = "models/model_metadata.json"
        
        private const val INPUT_SIZE = 224
        private const val CONFIDENCE_THRESHOLD = 0.8f
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–æ–¥–µ–ª–µ–π
    enum class ModelFormat {
        PYTORCH,
        ONNX,
        TFLITE
    }
    
    private var currentFormat: ModelFormat = ModelFormat.ONNX // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º ONNX (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å)
    private var modelInterface: ModelInterface? = null
    private var modelConfig: ModelConfig? = null
    
    init {
        loadConfig()
        loadModel()
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    fun setModelFormat(format: ModelFormat) {
        currentFormat = format
        loadModel()
        Log.i(TAG, "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç: $format")
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     */
    private fun loadModel() {
        try {
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–æ–¥–µ–ª—å
            modelInterface?.release()
            
            when (currentFormat) {
                ModelFormat.PYTORCH -> loadPyTorchModel()
                ModelFormat.ONNX -> loadOnnxModel()
                ModelFormat.TFLITE -> loadTfLiteModel()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∞ $currentFormat: ${e.message}")
            // Fallback –Ω–∞ PyTorch –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (currentFormat != ModelFormat.PYTORCH) {
                Log.i(TAG, "üîÑ –ü–æ–ø—ã—Ç–∫–∞ fallback –Ω–∞ PyTorch –º–æ–¥–µ–ª—å")
                currentFormat = ModelFormat.PYTORCH
                loadPyTorchModel()
            }
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç PyTorch –º–æ–¥–µ–ª—å
     */
    private fun loadPyTorchModel() {
        try {
            Log.i(TAG, "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É PyTorch –º–æ–¥–µ–ª–∏...")
            
            if (modelConfig == null) {
                Log.e(TAG, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return
            }
            
            Log.i(TAG, "üìÅ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: $PYTORCH_MODEL")
            Log.i(TAG, "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${modelConfig!!.modelName} v${modelConfig!!.version}")
            
            modelInterface = PyTorchModel(context, PYTORCH_MODEL, modelConfig!!)
            val success = modelInterface?.initialize() ?: false
            
            if (success) {
                Log.i(TAG, "‚úÖ PyTorch –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } else {
                Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PyTorch –º–æ–¥–µ–ª—å")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PyTorch –º–æ–¥–µ–ª–∏: ${e.message}")
            e.printStackTrace()
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç ONNX –º–æ–¥–µ–ª—å
     */
    private fun loadOnnxModel() {
        try {
            if (modelConfig == null) {
                Log.e(TAG, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return
            }
            
            modelInterface = OnnxModel(context, ONNX_MODEL, modelConfig!!)
            val success = modelInterface?.initialize() ?: false
            
            if (success) {
                Log.i(TAG, "‚úÖ ONNX –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } else {
                Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ONNX –º–æ–¥–µ–ª—å")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ONNX –º–æ–¥–µ–ª–∏: ${e.message}")
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç TensorFlow Lite –º–æ–¥–µ–ª—å
     */
    private fun loadTfLiteModel() {
        try {
            if (modelConfig == null) {
                Log.e(TAG, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return
            }
            
            modelInterface = TfLiteModel(context, TFLITE_MODEL, modelConfig!!)
            val success = modelInterface?.initialize() ?: false
            
            if (success) {
                Log.i(TAG, "‚úÖ TensorFlow Lite –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } else {
                Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TFLite –º–æ–¥–µ–ª—å")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TFLite –º–æ–¥–µ–ª–∏: ${e.message}")
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
     */
    private fun loadConfig() {
        try {
            Log.i(TAG, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏...")
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
            val configString = try {
                Log.i(TAG, "üìÅ –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥: $NEW_CONFIG_FILE")
                context.assets.open(NEW_CONFIG_FILE).bufferedReader().use { it.readText() }
            } catch (e: Exception) {
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                Log.i(TAG, "üìÅ Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥: $OLD_CONFIG_FILE")
                context.assets.open(OLD_CONFIG_FILE).bufferedReader().use { it.readText() }
            }
            
            Log.i(TAG, "üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–∞, –ø–∞—Ä—Å–∏–º JSON...")
            val json = JSONObject(configString)
            
            // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            val modelInfo = json.optJSONObject("model_info")
            val input = json.optJSONObject("input")
            val output = json.optJSONObject("output")
            val preprocessing = json.optJSONObject("preprocessing")
            val modelConfig = json.optJSONObject("model_config")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ —Å—Ç–∞—Ä—ã–π
            val config = try {
                if (modelConfig != null) {
                    Log.i(TAG, "üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    parseNewConfig(json)
                } else {
                    Log.i(TAG, "üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    parseOldConfig(json)
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞, fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π: ${e.message}")
                parseOldConfig(json)
            }
            
            this.modelConfig = config
            Log.i(TAG, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${config.modelName} (–≤–µ—Ä—Å–∏—è ${config.version})")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${e.message}")
            e.printStackTrace()
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    private fun parseNewConfig(json: JSONObject): ModelConfig {
        val modelInfo = json.getJSONObject("model_info")
        val modelConfig = json.getJSONObject("model_config")
        
        return ModelConfig(
            modelName = modelInfo.getString("name"),
            version = modelInfo.getString("version"),
            inputSize = intArrayOf(modelConfig.getInt("input_size"), modelConfig.getInt("input_size")),
            numClasses = modelConfig.getInt("num_classes"),
            classNames = modelConfig.getJSONArray("class_names").let { 
                Array(it.length()) { i -> it.getString(i) } 
            },
            mean = modelConfig.getJSONArray("mean").let { 
                floatArrayOf(it.getDouble(0).toFloat(), it.getDouble(1).toFloat(), it.getDouble(2).toFloat()) 
            },
            std = modelConfig.getJSONArray("std").let { 
                floatArrayOf(it.getDouble(0).toFloat(), it.getDouble(1).toFloat(), it.getDouble(2).toFloat()) 
            },
            confidenceThreshold = modelConfig.getDouble("confidence_threshold").toFloat()
        )
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    private fun parseOldConfig(json: JSONObject): ModelConfig {
        return ModelConfig(
            modelName = json.getString("model_name"),
            version = json.getString("version"),
            inputSize = json.getJSONArray("input_size").let { 
                intArrayOf(it.getInt(0), it.getInt(1)) 
            },
            numClasses = json.getInt("num_classes"),
            classNames = json.getJSONArray("class_names").let { 
                Array(it.length()) { i -> it.getString(i) } 
            },
            mean = json.getJSONArray("mean").let { 
                floatArrayOf(it.getDouble(0).toFloat(), it.getDouble(1).toFloat(), it.getDouble(2).toFloat()) 
            },
            std = json.getJSONArray("std").let { 
                floatArrayOf(it.getDouble(0).toFloat(), it.getDouble(1).toFloat(), it.getDouble(2).toFloat()) 
            },
            confidenceThreshold = json.getDouble("confidence_threshold").toFloat()
        )
    }
    
    /**
     * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —è—á–µ–π–∫–∞
     * @param cellBitmap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è—á–µ–π–∫–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
     */
    fun predictCell(cellBitmap: Bitmap): PredictionResult {
        if (modelInterface == null || !modelInterface!!.isReady()) {
            Log.e(TAG, "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞")
            return PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f))
        }
        
        return modelInterface!!.predict(cellBitmap)
    }
    
    /**
     * –ë–∞—Ç—á-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫
     * @param cellBitmaps —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —è—á–µ–µ–∫
     * @return —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
     */
    fun predictCellsBatch(cellBitmaps: List<Bitmap>): List<PredictionResult> {
        if (modelInterface == null || !modelInterface!!.isReady()) {
            Log.e(TAG, "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞")
            return List(cellBitmaps.size) { 
                PredictionResult(isFilled = false, confidence = 0f, probabilities = floatArrayOf(0f, 0f)) 
            }
        }
        
        return modelInterface!!.predictBatch(cellBitmaps)
    }
    

    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤–∞ –ª–∏ –º–æ–¥–µ–ª—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     */
    fun isModelReady(): Boolean {
        return modelInterface?.isReady() == true && modelConfig != null
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
     */
    fun getModelInfo(): String {
        return modelConfig?.let { config ->
            """
            –ú–æ–¥–µ–ª—å: ${config.modelName}
            –í–µ—Ä—Å–∏—è: ${config.version}
            –§–æ—Ä–º–∞—Ç: $currentFormat
            –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞: ${config.inputSize[0]}x${config.inputSize[1]}
            –ö–ª–∞—Å—Å—ã: ${config.classNames.joinToString(", ")}
            –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: ${config.confidenceThreshold * 100}%
            –°—Ç–∞—Ç—É—Å: ${if (isModelReady()) "–ì–æ—Ç–æ–≤–∞" else "–ù–µ –≥–æ—Ç–æ–≤–∞"}
            """.trimIndent()
        } ?: "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏
     */
    fun getCurrentFormat(): ModelFormat {
        return currentFormat
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
     */
    fun getAvailableFormats(): List<ModelFormat> {
        return ModelFormat.values().toList()
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –º–æ–¥–µ–ª–∏
     */
    fun release() {
        modelInterface?.release()
        modelInterface = null
        modelConfig = null
        Log.i(TAG, "üîß –†–µ—Å—É—Ä—Å—ã –º–æ–¥–µ–ª–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
    }
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
 */
data class ModelConfig(
    val modelName: String,
    val version: String,
    val inputSize: IntArray,
    val numClasses: Int,
    val classNames: Array<String>,
    val mean: FloatArray,
    val std: FloatArray,
    val confidenceThreshold: Float
)

 