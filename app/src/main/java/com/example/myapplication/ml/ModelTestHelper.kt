package com.example.myapplication.ml

import android.content.Context
import android.graphics.Bitmap
import android.util.Log

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
 */
class ModelTestHelper(private val context: Context) {
    
    companion object {
        private const val TAG = "ModelTestHelper"
    }
    
    private val modelManager = OMRModelManager(context)
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–æ–¥–µ–ª–µ–π
     */
    fun testAllFormats(testBitmap: Bitmap): TestResults {
        val results = mutableMapOf<OMRModelManager.ModelFormat, TestResult>()
        
        for (format in modelManager.getAvailableFormats()) {
            Log.i(TAG, "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞: $format")
            
            try {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º–∞—Ç
                modelManager.setModelFormat(format)
                
                // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                Thread.sleep(1000)
                
                if (modelManager.isModelReady()) {
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    val startTime = System.currentTimeMillis()
                    val prediction = modelManager.predictCell(testBitmap)
                    val endTime = System.currentTimeMillis()
                    
                    val result = TestResult(
                        format = format,
                        success = true,
                        prediction = prediction,
                        inferenceTime = endTime - startTime,
                        error = null
                    )
                    
                    results[format] = result
                    Log.i(TAG, "‚úÖ $format: ${prediction.getDescription()} (${endTime - startTime}ms)")
                    
                } else {
                    val result = TestResult(
                        format = format,
                        success = false,
                        prediction = null,
                        inferenceTime = 0,
                        error = "–ú–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞"
                    )
                    results[format] = result
                    Log.e(TAG, "‚ùå $format: –ú–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞")
                }
                
            } catch (e: Exception) {
                val result = TestResult(
                    format = format,
                    success = false,
                    prediction = null,
                    inferenceTime = 0,
                    error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                )
                results[format] = result
                Log.e(TAG, "‚ùå $format: ${e.message}")
            }
        }
        
        return TestResults(results)
    }
    
    /**
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–≤
     */
    fun benchmarkFormats(testBitmaps: List<Bitmap>): BenchmarkResults {
        val results = mutableMapOf<OMRModelManager.ModelFormat, BenchmarkResult>()
        
        for (format in modelManager.getAvailableFormats()) {
            Log.i(TAG, "‚ö° –ë–µ–Ω—á–º–∞—Ä–∫ —Ñ–æ—Ä–º–∞—Ç–∞: $format")
            
            try {
                modelManager.setModelFormat(format)
                Thread.sleep(1000)
                
                if (modelManager.isModelReady()) {
                    val times = mutableListOf<Long>()
                    val predictions = mutableListOf<PredictionResult>()
                    
                    // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å
                    for (i in 0 until 3) {
                        modelManager.predictCell(testBitmaps.first())
                    }
                    
                    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
                    for (bitmap in testBitmaps) {
                        val startTime = System.currentTimeMillis()
                        val prediction = modelManager.predictCell(bitmap)
                        val endTime = System.currentTimeMillis()
                        
                        times.add(endTime - startTime)
                        predictions.add(prediction)
                    }
                    
                    val avgTime = times.average().toLong()
                    val minTime = times.minOrNull() ?: 0
                    val maxTime = times.maxOrNull() ?: 0
                    
                    val result = BenchmarkResult(
                        format = format,
                        success = true,
                        averageTime = avgTime,
                        minTime = minTime,
                        maxTime = maxTime,
                        totalPredictions = predictions.size,
                        error = null
                    )
                    
                    results[format] = result
                    Log.i(TAG, "‚ö° $format: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ${avgTime}ms (–º–∏–Ω: ${minTime}ms, –º–∞–∫—Å: ${maxTime}ms)")
                    
                } else {
                    val result = BenchmarkResult(
                        format = format,
                        success = false,
                        averageTime = 0,
                        minTime = 0,
                        maxTime = 0,
                        totalPredictions = 0,
                        error = "–ú–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞"
                    )
                    results[format] = result
                }
                
            } catch (e: Exception) {
                val result = BenchmarkResult(
                    format = format,
                    success = false,
                    averageTime = 0,
                    minTime = 0,
                    maxTime = 0,
                    totalPredictions = 0,
                    error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                )
                results[format] = result
                Log.e(TAG, "‚ùå $format: ${e.message}")
            }
        }
        
        return BenchmarkResults(results)
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
     */
    fun getModelInfo(): String {
        return modelManager.getModelInfo()
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    fun release() {
        modelManager.release()
    }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
 */
data class TestResult(
    val format: OMRModelManager.ModelFormat,
    val success: Boolean,
    val prediction: PredictionResult?,
    val inferenceTime: Long,
    val error: String?
)

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
 */
data class TestResults(
    val results: Map<OMRModelManager.ModelFormat, TestResult>
) {
    fun getBestFormat(): OMRModelManager.ModelFormat? {
        return results.entries
            .filter { it.value.success }
            .minByOrNull { it.value.inferenceTime }
            ?.key
    }
    
    fun getSummary(): String {
        val successful = results.values.count { it.success }
        val total = results.size
        
        return """
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
        –£—Å–ø–µ—à–Ω–æ: $successful/$total
        ${results.entries.joinToString("\n") { 
            "${it.key}: ${if (it.value.success) "‚úÖ ${it.value.inferenceTime}ms" else "‚ùå ${it.value.error}"}" 
        }}
        """.trimIndent()
    }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
 */
data class BenchmarkResult(
    val format: OMRModelManager.ModelFormat,
    val success: Boolean,
    val averageTime: Long,
    val minTime: Long,
    val maxTime: Long,
    val totalPredictions: Int,
    val error: String?
)

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
 */
data class BenchmarkResults(
    val results: Map<OMRModelManager.ModelFormat, BenchmarkResult>
) {
    fun getFastestFormat(): OMRModelManager.ModelFormat? {
        return results.entries
            .filter { it.value.success }
            .minByOrNull { it.value.averageTime }
            ?.key
    }
    
    fun getSummary(): String {
        val successful = results.values.count { it.success }
        val total = results.size
        
        return """
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞:
        –£—Å–ø–µ—à–Ω–æ: $successful/$total
        ${results.entries.joinToString("\n") { 
            if (it.value.success) {
                "${it.key}: —Å—Ä–µ–¥–Ω–µ–µ ${it.value.averageTime}ms (${it.value.minTime}-${it.value.maxTime}ms)"
            } else {
                "${it.key}: ‚ùå ${it.value.error}"
            }
        }}
        """.trimIndent()
    }
} 