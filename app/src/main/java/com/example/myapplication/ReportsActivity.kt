package com.example.myapplication

import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.ImageButton
import android.widget.LinearLayout
import android.widget.RadioButton
import android.widget.RadioGroup
import android.widget.TextView
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.drawerlayout.widget.DrawerLayout
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.myapplication.reports.ReportsManager
import android.util.Log
import android.widget.Toast
import androidx.core.view.GravityCompat

class ReportsActivity : AppCompatActivity() {
    
    private lateinit var reportsManager: ReportsManager
    private lateinit var reportsAdapter: ReportsAdapter
    private lateinit var recyclerView: RecyclerView
    private lateinit var emptyStateText: TextView
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_reports)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
        reportsManager = ReportsManager(this)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        setupUI()
        setupDrawer()
        setupRecyclerView()
        loadReports()
    }
    
    private fun setupUI() {
        recyclerView = findViewById(R.id.reportsRecyclerView)
        emptyStateText = findViewById(R.id.empty_state_text)
        
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–æ–≤
        findViewById<Button>(R.id.btn_reset_reports).setOnClickListener {
            showResetReportsDialog()
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
        findViewById<Button>(R.id.btn_criteria_settings_drawer).setOnClickListener {
            showCriteriaSettingsDialog()
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        findViewById<Button>(R.id.btn_add_criteria).setOnClickListener {
            showAddCriteriaDialog()
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        updateCurrentCriteriaText()
    }
    
    private fun setupDrawer() {
        val drawerLayout = findViewById<DrawerLayout>(R.id.drawer_layout_reports)
        val btnMenu = findViewById<ImageButton>(R.id.btn_menu_reports)
        
        btnMenu.setOnClickListener {
            drawerLayout.openDrawer(GravityCompat.START)
        }
    }
    
    private fun setupRecyclerView() {
        reportsAdapter = ReportsAdapter(
            reports = emptyList(),
            onReportClick = { report -> showReportDetails(report) },
            onReportDelete = { report -> deleteReport(report) }
        )
        
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.adapter = reportsAdapter
    }
    
    private fun loadReports() {
        val reports = reportsManager.getReports()
        
        if (reports.isEmpty()) {
            recyclerView.visibility = View.GONE
            emptyStateText.visibility = View.VISIBLE
            emptyStateText.text = "üìã –û—Ç—á–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ–∫–Ω–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
        } else {
            recyclerView.visibility = View.VISIBLE
            emptyStateText.visibility = View.GONE
            reportsAdapter.updateReports(reports)
        }
        
        Log.d("ReportsActivity", "üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${reports.size} –æ—Ç—á–µ—Ç–æ–≤")
    }
    
    private fun showReportDetails(report: ReportsManager.Report) {
        val dialog = AlertDialog.Builder(this, R.style.CustomAlertDialog)
            .create()
        
        val dialogView = layoutInflater.inflate(R.layout.report_details_dialog, null)
        dialog.setView(dialogView)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        dialogView.findViewById<TextView>(R.id.dialog_title).text = report.title
        dialogView.findViewById<TextView>(R.id.dialog_date).text = report.date
        
        val omrResult = report.omrResult
        val correctCount = omrResult.grading.sum()
        val questionsCount = omrResult.grading.size
        val incorrectCount = questionsCount - correctCount
        val percentage = if (questionsCount > 0) (correctCount.toFloat() / questionsCount) * 100 else 0f
        
        Log.d("ReportsActivity", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–∞: correctCount=$correctCount, questionsCount=$questionsCount, incorrectCount=$incorrectCount")
        Log.d("ReportsActivity", "üìä Grading: ${omrResult.grading.contentToString()}")
        Log.d("ReportsActivity", "üìä SelectedAnswers: ${omrResult.selectedAnswers.contentToString()}")
        Log.d("ReportsActivity", "üìä CorrectAnswers: ${omrResult.correctAnswers}")
        
        dialogView.findViewById<TextView>(R.id.correct_answers).text = correctCount.toString()
        dialogView.findViewById<TextView>(R.id.incorrect_answers).text = incorrectCount.toString()
        dialogView.findViewById<TextView>(R.id.completion_percentage).text = "${String.format("%.1f", percentage)}%"
        dialogView.findViewById<TextView>(R.id.grade).text = report.grade.toString()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç –æ—Ü–µ–Ω–∫–∏
        val gradeColor = when (report.grade) {
            5 -> resources.getColor(R.color.success, theme)
            4 -> resources.getColor(R.color.info, theme)
            3 -> resources.getColor(R.color.warning, theme)
            2 -> resources.getColor(R.color.error, theme)
            else -> resources.getColor(R.color.text_secondary, theme)
        }
        dialogView.findViewById<TextView>(R.id.grade).setTextColor(gradeColor)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—à–∏–±–∫–∏
        val errorsContainer = dialogView.findViewById<LinearLayout>(R.id.errors_container)
        val errorsCard = dialogView.findViewById<androidx.cardview.widget.CardView>(R.id.errors_card)
        
        Log.d("ReportsActivity", "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏: ${omrResult.incorrectQuestions.size} –æ—à–∏–±–æ–∫")
        Log.d("ReportsActivity", "üîç –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–æ–∫: ${omrResult.incorrectQuestions}")
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ grading
        val actualErrors = mutableListOf<Map<String, Any>>()
        
        omrResult.grading.forEachIndexed { index, isCorrect ->
            if (isCorrect == 0) { // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                val questionNumber = index + 1
                val selectedAnswer = (omrResult.selectedAnswers.getOrNull(index) ?: 0) + 1  // +1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                val correctAnswer = (omrResult.correctAnswers.getOrNull(index) ?: 0) + 1   // +1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                Log.d("ReportsActivity", "üîç –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å $questionNumber (–∏–Ω–¥–µ–∫—Å $index), –≤—ã–±—Ä–∞–Ω $selectedAnswer, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π $correctAnswer")
                
                actualErrors.add(mapOf(
                    "question" to questionNumber,
                    "selected" to selectedAnswer,
                    "correct" to correctAnswer
                ))
            }
        }
        
        Log.d("ReportsActivity", "üîç –ù–∞–π–¥–µ–Ω–æ ${actualErrors.size} —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        
        if (actualErrors.isNotEmpty()) {
            errorsContainer.removeAllViews()
            
            actualErrors.forEach { error ->
                try {
                    val questionNumber = error["question"] as? Int ?: 0
                    val selectedAnswer = error["selected"] as? Int ?: 0  // –£–∂–µ +1 –≤ ImageProcessor
                    val correctAnswer = error["correct"] as? Int ?: 0    // –£–∂–µ +1 –≤ ImageProcessor
                    
                    val errorView = TextView(this).apply {
                        text = "–í–æ–ø—Ä–æ—Å $questionNumber: –æ—Ç–≤–µ—Ç $selectedAnswer, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π $correctAnswer"
                        setTextColor(resources.getColor(R.color.text, theme))
                        textSize = 14f
                        setPadding(0, 8, 0, 8)
                    }
                    errorsContainer.addView(errorView)
                    
                    Log.d("ReportsActivity", "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å $questionNumber (–æ—Ç–≤–µ—Ç $selectedAnswer, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π $correctAnswer)")
                } catch (e: Exception) {
                    Log.e("ReportsActivity", "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∏: ${e.message}")
                    val errorView = TextView(this).apply {
                        text = "–í–æ–ø—Ä–æ—Å: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
                        setTextColor(resources.getColor(R.color.error, theme))
                        textSize = 14f
                        setPadding(0, 8, 0, 8)
                    }
                    errorsContainer.addView(errorView)
                }
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—à–∏–±–æ–∫
            errorsContainer.removeAllViews()
            val noErrorsView = TextView(this).apply {
                text = "üéâ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!"
                setTextColor(resources.getColor(R.color.success, theme))
                textSize = 14f
                setPadding(0, 8, 0, 8)
                textAlignment = View.TEXT_ALIGNMENT_CENTER
            }
            errorsContainer.addView(noErrorsView)
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_close).setOnClickListener {
            dialog.dismiss()
        }
        
        dialog.show()
    }
    

    
    private fun deleteReport(report: ReportsManager.Report) {
        AlertDialog.Builder(this)
            .setTitle("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç '${report.title}'?")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                if (reportsManager.deleteReport(report.id)) {
                    Toast.makeText(this, "–û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω", Toast.LENGTH_SHORT).show()
                    loadReports()
                } else {
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun showCriteriaSettingsDialog() {
        val criteria = reportsManager.getCriteriaList()
        val currentCriteria = reportsManager.getCurrentCriteria()
        
        val dialog = AlertDialog.Builder(this, R.style.CustomAlertDialog)
            .create()
        
        val dialogView = layoutInflater.inflate(R.layout.criteria_settings_dialog, null)
        dialog.setView(dialogView)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        val criteriaContainer = dialogView.findViewById<LinearLayout>(R.id.criteria_container)
        criteriaContainer.removeAllViews()
        
        criteria.forEach { criterion ->
            val criteriaItem = layoutInflater.inflate(R.layout.criteria_item, criteriaContainer, false)
            
            criteriaItem.findViewById<TextView>(R.id.criteria_name).text = criterion.name
            criteriaItem.findViewById<TextView>(R.id.criteria_type).text = when (criterion.type) {
                ReportsManager.CriteriaType.PERCENTAGE -> "–ü–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º"
                ReportsManager.CriteriaType.POINTS -> "–ü–æ –±–∞–ª–ª–∞–º"
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π
            if (criterion.id == currentCriteria?.id) {
                criteriaItem.findViewById<TextView>(R.id.current_indicator).visibility = View.VISIBLE
                criteriaItem.setBackgroundResource(R.drawable.menu_card_bg)
            } else {
                criteriaItem.findViewById<TextView>(R.id.current_indicator).visibility = View.GONE
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è
            criteriaItem.setOnClickListener {
                reportsManager.setCurrentCriteria(criterion.id)
                Toast.makeText(this, "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã: ${criterion.name}", Toast.LENGTH_SHORT).show()
                updateCurrentCriteriaText() // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
                loadReports() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
                dialog.dismiss()
            }
            
            criteriaContainer.addView(criteriaItem)
        }
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_delete_criteria).setOnClickListener {
            val currentCriteria = reportsManager.getCurrentCriteria()
            if (currentCriteria != null && currentCriteria.name != "–ü–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)") {
                AlertDialog.Builder(this)
                    .setTitle("–£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")
                    .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ '${currentCriteria.name}'?")
                    .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                        reportsManager.deleteCriteria(currentCriteria.id)
                        Toast.makeText(this, "–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                        updateCurrentCriteriaText()
                        loadReports() // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏
                        dialog.dismiss()
                    }
                    .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
                    .show()
            } else {
                Toast.makeText(this, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", Toast.LENGTH_SHORT).show()
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_close_criteria).setOnClickListener {
            dialog.dismiss()
        }
        
        dialog.show()
    }
    
    private fun showAddCriteriaDialog() {
        val dialog = AlertDialog.Builder(this, R.style.CustomAlertDialog)
            .create()
        
        val dialogView = layoutInflater.inflate(R.layout.add_criteria_dialog, null)
        dialog.setView(dialogView)
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI
        val etCriteriaName = dialogView.findViewById<EditText>(R.id.et_criteria_name)
        val rgCriteriaType = dialogView.findViewById<RadioGroup>(R.id.rg_criteria_type)
        val rbPercentage = dialogView.findViewById<RadioButton>(R.id.rb_percentage)
        val rbPoints = dialogView.findViewById<RadioButton>(R.id.rb_points)
        val tvSettingsTitle = dialogView.findViewById<TextView>(R.id.tv_settings_title)
        val etGrade5Min = dialogView.findViewById<EditText>(R.id.et_grade_5_min)
        val etGrade4Min = dialogView.findViewById<EditText>(R.id.et_grade_4_min)
        val etGrade3Min = dialogView.findViewById<EditText>(R.id.et_grade_3_min)
        val etGrade2Min = dialogView.findViewById<EditText>(R.id.et_grade_2_min)
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        rgCriteriaType.setOnCheckedChangeListener { group, checkedId ->
            when (checkedId) {
                R.id.rb_percentage -> {
                    tvSettingsTitle.text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º:"
                    etGrade5Min.hint = "90"
                    etGrade4Min.hint = "75"
                    etGrade3Min.hint = "51"
                    etGrade2Min.hint = "0"
                }
                R.id.rb_points -> {
                    tvSettingsTitle.text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –±–∞–ª–ª–∞–º:"
                    etGrade5Min.hint = "18"
                    etGrade4Min.hint = "15"
                    etGrade3Min.hint = "10"
                    etGrade2Min.hint = "0"
                }
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_cancel).setOnClickListener {
            dialog.dismiss()
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_save).setOnClickListener {
            val name = etCriteriaName.text.toString().trim()
            if (name.isEmpty()) {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            
            val type = if (rbPercentage.isChecked) ReportsManager.CriteriaType.PERCENTAGE else ReportsManager.CriteriaType.POINTS
            
            try {
                val grade5Min = etGrade5Min.text.toString().toDoubleOrNull() ?: 0.0
                val grade4Min = etGrade4Min.text.toString().toDoubleOrNull() ?: 0.0
                val grade3Min = etGrade3Min.text.toString().toDoubleOrNull() ?: 0.0
                val grade2Min = etGrade2Min.text.toString().toDoubleOrNull() ?: 0.0
                
                // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
                val criteria = mutableMapOf<Int, ClosedRange<Double>>()
                criteria[5] = grade5Min..100.0
                criteria[4] = grade4Min..(grade5Min - 0.1)
                criteria[3] = grade3Min..(grade4Min - 0.1)
                criteria[2] = grade2Min..(grade3Min - 0.1)
                
                val newCriteria = ReportsManager.GradingCriteria(
                    id = System.currentTimeMillis().toString(),
                    name = name,
                    type = type,
                    criteria = criteria,
                    maxPoints = if (type == ReportsManager.CriteriaType.POINTS) 20 else 0
                )
                
                reportsManager.addCriteria(newCriteria)
                reportsManager.setCurrentCriteria(newCriteria.id)
                
                Toast.makeText(this, "–ö—Ä–∏—Ç–µ—Ä–∏–∏ '$name' –¥–æ–±–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                updateCurrentCriteriaText()
                loadReports() // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏
                dialog.dismiss()
                
            } catch (e: Exception) {
                Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
        
        dialog.show()
    }
    
    private fun showResetReportsDialog() {
        AlertDialog.Builder(this)
            .setTitle("–°–±—Ä–æ—Å –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç—á–µ—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ") { _, _ ->
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
                val reports = reportsManager.getReports()
                reports.forEach { report ->
                    reportsManager.deleteReport(report.id)
                }
                Toast.makeText(this, "–í—Å–µ –æ—Ç—á–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                loadReports()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun updateCurrentCriteriaText() {
        val currentCriteria = reportsManager.getCurrentCriteria()
        val criteriaText = findViewById<TextView>(R.id.current_criteria_text)
        
        if (currentCriteria != null) {
            criteriaText.text = currentCriteria.name
        } else {
            criteriaText.text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        }
    }
    
    override fun onResume() {
        super.onResume()
        loadReports() // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        updateCurrentCriteriaText()
    }
} 