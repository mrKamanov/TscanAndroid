package com.example.myapplication

import android.content.Intent
import android.net.Uri
import android.os.Environment
import androidx.core.content.FileProvider
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.*
import android.widget.Button
import android.widget.RadioButton
import android.widget.RadioGroup
import android.widget.EditText
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.GravityCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.drawerlayout.widget.DrawerLayout
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.myapplication.reports.ReportsManager
import com.example.myapplication.reports.StatisticsAdapter
import com.example.myapplication.reports.ReportsManager.GradingCriteria
import com.example.myapplication.reports.ReportsManager.CriteriaType
import com.google.android.material.navigation.NavigationView
import com.example.myapplication.reports.ExcelExporter
import java.io.File
import android.view.LayoutInflater

class ReportsActivity : AppCompatActivity() {
    
    private lateinit var reportsManager: ReportsManager
    private lateinit var reportsAdapter: ReportsAdapter
    private lateinit var statisticsAdapter: StatisticsAdapter
    private lateinit var drawerLayout: DrawerLayout
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_reports)

        // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        WindowCompat.setDecorFitsSystemWindows(window, false)
        val controller = WindowInsetsControllerCompat(window, window.decorView)
        controller.hide(WindowInsetsCompat.Type.systemBars())
        controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE

        reportsManager = ReportsManager(this)
        setupUI()
        setupDrawer()
        setupRecyclerView()
        loadReports()
        loadStatistics()
    }
    
    private fun setupUI() {
        drawerLayout = findViewById(R.id.drawer_layout_reports)
        // –£–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–Ω–æ–ø–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ layout
    }
    
    private fun setupDrawer() {
        setupCriteriaSettings()
        setupDrawerButtons()
    }
    
    private fun setupCriteriaSettings() {
        val rbPercentages = findViewById<RadioButton>(R.id.rb_percentages)
        val rbGrades = findViewById<RadioButton>(R.id.rb_grades)
        val etGrade5 = findViewById<EditText>(R.id.et_grade_5)
        val etGrade4 = findViewById<EditText>(R.id.et_grade_4)
        val etGrade3 = findViewById<EditText>(R.id.et_grade_3)
        val etGrade2 = findViewById<EditText>(R.id.et_grade_2)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        loadCriteriaSettings()
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        rbPercentages.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                updateUnitLabels("%")
                updateDefaultValues(true)
            }
        }
        
        rbGrades.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                updateUnitLabels("–±–∞–ª–ª")
                updateDefaultValues(false)
            }
        }
    }
    
    private fun setupDrawerButtons() {
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
        findViewById<Button>(R.id.btn_apply_criteria).setOnClickListener {
            applyCriteriaSettings()
            drawerLayout.closeDrawer(GravityCompat.START)
            Toast.makeText(this, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", Toast.LENGTH_SHORT).show()
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
        findViewById<Button>(R.id.btn_export_excel).setOnClickListener {
            exportToExcel()
            drawerLayout.closeDrawer(GravityCompat.START)
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç—ã"
        findViewById<Button>(R.id.btn_reset_reports).setOnClickListener {
            showResetReportsDialog()
            drawerLayout.closeDrawer(GravityCompat.START)
        }
    }
    
    private fun setupRecyclerView() {
        val recyclerView = findViewById<RecyclerView>(R.id.reportsRecyclerView)
        val statisticsRecyclerView = findViewById<RecyclerView>(R.id.statistics_recycler_view)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        reportsAdapter = ReportsAdapter()
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.adapter = reportsAdapter

        reportsAdapter.setOnItemClickListener { report ->
            showReportDetails(report)
        }

        reportsAdapter.setOnDeleteClickListener { report ->
            deleteReport(report)
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏
        statisticsAdapter = StatisticsAdapter()
        statisticsRecyclerView.layoutManager = LinearLayoutManager(this)
        statisticsRecyclerView.adapter = statisticsAdapter
    }
    
    private fun loadReports() {
        val reports = reportsManager.getReports()
        reportsAdapter.updateReports(reports)
        
        val emptyStateText = findViewById<TextView>(R.id.empty_state_text)
        if (reports.isEmpty()) {
            emptyStateText.visibility = View.VISIBLE
        } else {
            emptyStateText.visibility = View.GONE
        }
        
        updateCurrentCriteriaText()
    }

    private fun loadStatistics() {
        Log.d("ReportsActivity", "üìä loadStatistics() –≤—ã–∑–≤–∞–Ω")
        val statistics = reportsManager.getStatistics()
        Log.d("ReportsActivity", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${statistics.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        Log.d("ReportsActivity", "üìä –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: ${(statistics["questionHeatmap"] as? List<*>)?.size ?: 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        statisticsAdapter.updateStatistics(statistics)
        Log.d("ReportsActivity", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∞–¥–∞–ø—Ç–µ—Ä–µ")
    }
    
    private fun showReportDetails(report: ReportsManager.Report) {
        val dialogView = layoutInflater.inflate(R.layout.report_details_dialog, null)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        dialogView.findViewById<TextView>(R.id.tv_report_title).text = report.title
        dialogView.findViewById<TextView>(R.id.tv_report_date).text = "–î–∞—Ç–∞: ${report.date}"
        
        val correctCount = report.omrResult.grading.sum()
        val totalCount = report.omrResult.grading.size
        val incorrectCount = totalCount - correctCount
        val percentage = if (totalCount > 0) (correctCount.toFloat() / totalCount) * 100 else 0f
        
        dialogView.findViewById<TextView>(R.id.tv_correct_answers).text = "$correctCount –∏–∑ $totalCount"
        dialogView.findViewById<TextView>(R.id.tv_incorrect_answers).text = incorrectCount.toString()
        dialogView.findViewById<TextView>(R.id.tv_percentage).text = "${String.format("%.1f", percentage)}%"
        dialogView.findViewById<TextView>(R.id.tv_grade).text = "–û—Ü–µ–Ω–∫–∞ ${report.grade}"
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        val errorsContainer = dialogView.findViewById<LinearLayout>(R.id.errors_container)
        errorsContainer.removeAllViews()
        
        val actualErrors = mutableListOf<Map<String, Any>>()
        report.omrResult.grading.forEachIndexed { index, isCorrect ->
            if (isCorrect == 0) {
                val selectedAnswer = report.omrResult.selectedAnswers[index]
                val correctAnswer = report.omrResult.correctAnswers[index]
                actualErrors.add(mapOf(
                    "question_number" to (index + 1),
                    "selected_answer" to (selectedAnswer + 1),
                    "correct_answer" to (correctAnswer + 1)
                ))
            }
        }
        
        if (actualErrors.isEmpty()) {
            val noErrorsView = TextView(this).apply {
                text = "‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!"
                setTextColor(android.graphics.Color.parseColor("#4CAF50"))
                textSize = 14f
                setPadding(0, 8, 0, 8)
            }
            errorsContainer.addView(noErrorsView)
        } else {
            actualErrors.forEach { error ->
                val errorView = TextView(this).apply {
                    text = "–í–æ–ø—Ä–æ—Å ${error["question_number"]}: –≤—ã–±—Ä–∞–Ω–æ ${error["selected_answer"]}, –≤–µ—Ä–Ω–æ ${error["correct_answer"]}"
                    setTextColor(android.graphics.Color.parseColor("#FF6B6B"))
                    textSize = 14f
                    setPadding(0, 8, 0, 8)
                }
                errorsContainer.addView(errorView)
            }
        }
        
        val dialog = AlertDialog.Builder(this, R.style.CustomAlertDialog)
            .setView(dialogView)
            .setCancelable(true)
            .create()
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        dialogView.findViewById<Button>(R.id.btn_close).setOnClickListener {
            dialog.dismiss()
        }
        
        dialog.show()
    }
    
    private fun deleteReport(report: ReportsManager.Report) {
        AlertDialog.Builder(this)
            .setTitle("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç '${report.title}'?")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                reportsManager.deleteReport(report.id)
                loadReports()
                loadStatistics()
                    Toast.makeText(this, "–û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω", Toast.LENGTH_SHORT).show()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun showCriteriaSettingsDialog() {
        val dialogView = layoutInflater.inflate(R.layout.criteria_settings_dialog, null)
        val criteriaContainer = dialogView.findViewById<LinearLayout>(R.id.criteria_container)
        val currentCriteria = reportsManager.getCurrentCriteria()
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞—Ä–∞–Ω–µ–µ
        val dialog = AlertDialog.Builder(this, R.style.CustomAlertDialog)
            .setView(dialogView)
            .setCancelable(true)
            .create()
        
        criteriaContainer.removeAllViews()
        
        reportsManager.getCriteriaList().forEach { criteria ->
            val criteriaView = layoutInflater.inflate(R.layout.criteria_item, criteriaContainer, false)
            
            criteriaView.findViewById<TextView>(R.id.tv_criteria_name).text = criteria.name
            criteriaView.findViewById<TextView>(R.id.tv_criteria_type).text = 
                if (criteria.type == ReportsManager.CriteriaType.PERCENTAGE) "–ü–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º" else "–ü–æ –±–∞–ª–ª–∞–º"
            
            val currentIndicator = criteriaView.findViewById<TextView>(R.id.current_indicator)
            if (criteria.id == currentCriteria?.id) {
                currentIndicator.text = "‚úì"
                currentIndicator.setTextColor(android.graphics.Color.parseColor("#4CAF50"))
                currentIndicator.visibility = View.VISIBLE
            } else {
                currentIndicator.visibility = View.GONE
            }
            
            criteriaView.setOnClickListener {
                reportsManager.setCurrentCriteria(criteria.id)
                reportsManager.recalculateAllGrades()
                loadReports()
                loadStatistics()
                updateCurrentCriteriaText()
                Toast.makeText(this, "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                dialog.dismiss()
            }
            
            criteriaContainer.addView(criteriaView)
        }
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤)
        val btnDelete = dialogView.findViewById<Button>(R.id.btn_delete_criteria)
        btnDelete.setOnClickListener {
            val nonDefaultCriteria = reportsManager.getCriteriaList().filter { it.id != "default" }
            if (nonDefaultCriteria.isNotEmpty()) {
                val criteriaToDelete = nonDefaultCriteria.first()
                val success = reportsManager.deleteCriteria(criteriaToDelete.id)
                if (success) {
                    loadReports()
                    loadStatistics()
                    updateCurrentCriteriaText()
                    Toast.makeText(this, "–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                    dialog.dismiss()
                } else {
                    Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏", Toast.LENGTH_SHORT).show()
                }
            } else {
                Toast.makeText(this, "–ù–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", Toast.LENGTH_SHORT).show()
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        dialogView.findViewById<Button>(R.id.btn_close).setOnClickListener {
            dialog.dismiss()
        }
        
        dialog.show()
    }
    
    private fun showAddCriteriaDialog() {
        val dialogView = layoutInflater.inflate(R.layout.add_criteria_dialog, null)
        
        val etName = dialogView.findViewById<EditText>(R.id.et_criteria_name)
        val rgCriteriaType = dialogView.findViewById<RadioGroup>(R.id.rg_criteria_type)
        val etGrade5 = dialogView.findViewById<EditText>(R.id.et_grade_5)
        val etGrade4 = dialogView.findViewById<EditText>(R.id.et_grade_4)
        val etGrade3 = dialogView.findViewById<EditText>(R.id.et_grade_3)
        val etGrade2 = dialogView.findViewById<EditText>(R.id.et_grade_2)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        etGrade5.setText("90")
        etGrade4.setText("75")
        etGrade3.setText("51")
        etGrade2.setText("0")
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        rgCriteriaType.setOnCheckedChangeListener { group, checkedId ->
            val isPercentage = checkedId == R.id.rb_percentage
            val hint = if (isPercentage) "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏" else "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏"
            etGrade5.hint = hint
            etGrade4.hint = hint
            etGrade3.hint = hint
            etGrade2.hint = hint
        }
        
        val dialog = AlertDialog.Builder(this, R.style.CustomAlertDialog)
            .setView(dialogView)
            .setCancelable(true)
            .create()
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        dialogView.findViewById<Button>(R.id.btn_cancel).setOnClickListener {
            dialog.dismiss()
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        dialogView.findViewById<Button>(R.id.btn_save).setOnClickListener {
            val name = etName.text.toString()
            if (name.isNotEmpty()) {
                val isPercentage = rgCriteriaType.checkedRadioButtonId == R.id.rb_percentage
                val type = if (isPercentage) ReportsManager.CriteriaType.PERCENTAGE else ReportsManager.CriteriaType.POINTS
                
                val grade5Value = etGrade5.text.toString().toDoubleOrNull() ?: 0.0
                val grade4Value = etGrade4.text.toString().toDoubleOrNull() ?: 0.0
                val grade3Value = etGrade3.text.toString().toDoubleOrNull() ?: 0.0
                val grade2Value = etGrade2.text.toString().toDoubleOrNull() ?: 0.0
                
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
                val criteria = mutableMapOf<Int, ClosedRange<Double>>()
                if (isPercentage) {
                    criteria[5] = grade5Value..100.0
                    criteria[4] = grade4Value..(grade5Value - 0.1)
                    criteria[3] = grade3Value..(grade4Value - 0.1)
                    criteria[2] = grade2Value..(grade3Value - 0.1)
                } else {
                    val maxPoints = maxOf(grade5Value, grade4Value, grade3Value, grade2Value)
                    criteria[5] = grade5Value..maxPoints
                    criteria[4] = grade4Value..(grade5Value - 0.1)
                    criteria[3] = grade3Value..(grade4Value - 0.1)
                    criteria[2] = grade2Value..(grade3Value - 0.1)
                }
                
                val newCriteria = ReportsManager.GradingCriteria(
                    id = java.util.UUID.randomUUID().toString(),
                    name = name,
                    type = type,
                    criteria = criteria,
                    maxPoints = if (isPercentage) 100 else maxOf(grade5Value, grade4Value, grade3Value, grade2Value).toInt()
                )
                
                reportsManager.addCriteria(newCriteria)
                reportsManager.setCurrentCriteria(newCriteria.id)
                reportsManager.recalculateAllGrades()
                loadReports()
                loadStatistics()
                updateCurrentCriteriaText()
                Toast.makeText(this, "–ù–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                dialog.dismiss()
            } else {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤", Toast.LENGTH_SHORT).show()
            }
        }
        
        dialog.show()
    }



    private fun updateCurrentCriteriaText() {
        val currentCriteria = reportsManager.getCurrentCriteria()
        // –£–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ layout
    }
    
    override fun onResume() {
        super.onResume()
        loadReports()
        loadStatistics()
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ Excel —Ñ–∞–π–ª
     */
    private fun exportToExcel() {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            val progressDialog = createProgressDialog()
            progressDialog.show()
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            Thread {
                try {
                    val excelExporter = ExcelExporter(this)
                    val file = excelExporter.exportToExcel(reportsManager)
                    
                    runOnUiThread {
                        progressDialog.dismiss()
                        
                        if (file != null) {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞
                            showExportSuccessDialog(file)
                        } else {
                            Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞", Toast.LENGTH_LONG).show()
                        }
                    }
                } catch (e: Exception) {
                    Log.e("ReportsActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel", e)
                    runOnUiThread {
                        progressDialog.dismiss()
                        Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
                    }
                }
            }.start()
            
        } catch (e: Exception) {
            Log.e("ReportsActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞", e)
            Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    private fun createProgressDialog(): AlertDialog {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.progress_dialog, null)
        val dialog = AlertDialog.Builder(this)
            .setView(dialogView)
            .setCancelable(false)
            .create()
        
        // –£–±–∏—Ä–∞–µ–º –±–µ–ª—ã–µ —É–≥–ª—ã
        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)
        
        return dialog
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Excel —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
     */
    private fun openExcelFile(file: File) {
        try {
            val uri = FileProvider.getUriForFile(
                this,
                "${applicationContext.packageName}.fileprovider",
                file
            )
            
            val intent = Intent(Intent.ACTION_VIEW).apply {
                setDataAndType(uri, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            }
            
            if (intent.resolveActivity(packageManager) != null) {
                startActivity(intent)
            } else {
                Toast.makeText(this, "–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Excel —Ñ–∞–π–ª–æ–≤", Toast.LENGTH_LONG).show()
            }
        } catch (e: Exception) {
            Log.e("ReportsActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞", Toast.LENGTH_LONG).show()
        }
    }

    private fun showExportSuccessDialog(file: File) {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.export_success_dialog, null)
        val dialog = AlertDialog.Builder(this)
            .setView(dialogView)
            .setCancelable(false)
            .create()
        
        // –£–±–∏—Ä–∞–µ–º –±–µ–ª—ã–µ —É–≥–ª—ã
        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        val tvFileInfo = dialogView.findViewById<TextView>(R.id.tv_file_info)
        tvFileInfo.text = "–§–∞–π–ª: ${file.name}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∏'"
        
        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É"
        dialogView.findViewById<Button>(R.id.btn_open_file).setOnClickListener {
            dialog.dismiss()
            openFileLocation(file)
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        dialogView.findViewById<Button>(R.id.btn_share_file).setOnClickListener {
            dialog.dismiss()
            shareExcelFile(file)
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        dialogView.findViewById<Button>(R.id.btn_close).setOnClickListener {
            dialog.dismiss()
        }
        
        dialog.show()
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private fun shareExcelFile(file: File) {
        try {
            val uri = FileProvider.getUriForFile(
                this,
                "${applicationContext.packageName}.fileprovider",
                file
            )
            
            val shareIntent = Intent(Intent.ACTION_SEND).apply {
                type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                putExtra(Intent.EXTRA_STREAM, uri)
                putExtra(Intent.EXTRA_SUBJECT, "OMR –û—Ç—á–µ—Ç")
                putExtra(Intent.EXTRA_TEXT, "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç")
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            }
            
            startActivity(Intent.createChooser(shareIntent, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"))
            
        } catch (e: Exception) {
            Log.e("ReportsActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", Toast.LENGTH_LONG).show()
        }
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º
     */
    private fun openFileLocation(file: File) {
        try {
            val intent = Intent(Intent.ACTION_VIEW)
            val uri = Uri.parse("content://com.android.externalstorage.documents/document/primary:Download")
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É Downloads
            try {
                startActivity(intent)
            } catch (e: Exception) {
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                Toast.makeText(this, "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${file.absolutePath}", Toast.LENGTH_LONG).show()
            }
            
        } catch (e: Exception) {
            Log.e("ReportsActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏", e)
            Toast.makeText(this, "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∏'", Toast.LENGTH_LONG).show()
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    private fun loadCriteriaSettings() {
        val prefs = getSharedPreferences("criteria_settings", MODE_PRIVATE)
        val isPercentages = prefs.getBoolean("is_percentages", true)
        
        findViewById<RadioButton>(R.id.rb_percentages).isChecked = isPercentages
        findViewById<RadioButton>(R.id.rb_grades).isChecked = !isPercentages
        
        findViewById<EditText>(R.id.et_grade_5).setText(prefs.getInt("grade_5", 90).toString())
        findViewById<EditText>(R.id.et_grade_4).setText(prefs.getInt("grade_4", 75).toString())
        findViewById<EditText>(R.id.et_grade_3).setText(prefs.getInt("grade_3", 50).toString())
        findViewById<EditText>(R.id.et_grade_2).setText(prefs.getInt("grade_2", 0).toString())
        
        updateUnitLabels(if (isPercentages) "%" else "–±–∞–ª–ª")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫ ReportsManager
        applyLoadedCriteriaToManager()
    }
    
    private fun applyLoadedCriteriaToManager() {
        val prefs = getSharedPreferences("criteria_settings", MODE_PRIVATE)
        val isPercentages = prefs.getBoolean("is_percentages", true)
        val grade5 = prefs.getInt("grade_5", if (isPercentages) 90 else 0)
        val grade4 = prefs.getInt("grade_4", if (isPercentages) 75 else 0)
        val grade3 = prefs.getInt("grade_3", if (isPercentages) 50 else 0)
        val grade2 = prefs.getInt("grade_2", if (isPercentages) 0 else 0)
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ReportsManager
        val criteria = if (isPercentages) {
            // –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            mapOf(
                5 to grade5.toDouble()..100.0,
                4 to grade4.toDouble()..(grade5 - 0.01),
                3 to grade3.toDouble()..(grade4 - 0.01),
                2 to 0.0..(grade3 - 0.01)
            )
        } else {
            // –†–µ–∂–∏–º –±–∞–ª–ª–æ–≤ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            mapOf(
                5 to grade5.toDouble()..1000.0, // –ë–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                4 to grade4.toDouble()..(grade5 - 0.01),
                3 to grade3.toDouble()..(grade4 - 0.01),
                2 to 0.0..(grade3 - 0.01)
            )
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ ReportsManager
        val newCriteria = ReportsManager.GradingCriteria(
            id = "custom",
            name = if (isPercentages) "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)" else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ (–±–∞–ª–ª—ã)",
            type = if (isPercentages) ReportsManager.CriteriaType.PERCENTAGE else ReportsManager.CriteriaType.POINTS,
            criteria = criteria
        )
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
        val existingCriteria = reportsManager.getCriteriaList().find { it.id == "custom" }
        if (existingCriteria != null) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            reportsManager.deleteCriteria("custom")
        }
        reportsManager.addCriteria(newCriteria)
        reportsManager.setCurrentCriteria("custom")
    }
    
    private fun updateUnitLabels(unit: String) {
        findViewById<TextView>(R.id.tv_grade_5_unit).text = unit
        findViewById<TextView>(R.id.tv_grade_4_unit).text = unit
        findViewById<TextView>(R.id.tv_grade_3_unit).text = unit
        findViewById<TextView>(R.id.tv_grade_2_unit).text = unit
    }
    
    private fun updateDefaultValues(isPercentages: Boolean) {
        if (isPercentages) {
            findViewById<EditText>(R.id.et_grade_5).setText("90")
            findViewById<EditText>(R.id.et_grade_4).setText("75")
            findViewById<EditText>(R.id.et_grade_3).setText("50")
            findViewById<EditText>(R.id.et_grade_2).setText("0")
        } else {
            findViewById<EditText>(R.id.et_grade_5).setText("")
            findViewById<EditText>(R.id.et_grade_4).setText("")
            findViewById<EditText>(R.id.et_grade_3).setText("")
            findViewById<EditText>(R.id.et_grade_2).setText("")
        }
    }
    
    private fun applyCriteriaSettings() {
        val prefs = getSharedPreferences("criteria_settings", MODE_PRIVATE)
        val editor = prefs.edit()
        
        val isPercentages = findViewById<RadioButton>(R.id.rb_percentages).isChecked
        editor.putBoolean("is_percentages", isPercentages)
        
        val grade5 = findViewById<EditText>(R.id.et_grade_5).text.toString().toIntOrNull() ?: (if (isPercentages) 90 else 0)
        val grade4 = findViewById<EditText>(R.id.et_grade_4).text.toString().toIntOrNull() ?: (if (isPercentages) 75 else 0)
        val grade3 = findViewById<EditText>(R.id.et_grade_3).text.toString().toIntOrNull() ?: (if (isPercentages) 50 else 0)
        val grade2 = findViewById<EditText>(R.id.et_grade_2).text.toString().toIntOrNull() ?: (if (isPercentages) 0 else 0)
        
        editor.putInt("grade_5", grade5)
        editor.putInt("grade_4", grade4)
        editor.putInt("grade_3", grade3)
        editor.putInt("grade_2", grade2)
        
        editor.apply()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ ReportsManager
        val newCriteria = mapOf(
            "is_percentages" to isPercentages,
            "grade_5" to grade5,
            "grade_4" to grade4,
            "grade_3" to grade3,
            "grade_2" to grade2
        )
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        val reports = reportsManager.getReports()
        reports.forEach { report ->
            val newGrade = calculateGrade(report.omrResult.grading, newCriteria)
            reportsManager.updateReportGrade(report.id, newGrade)
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        loadReports()
        loadStatistics()
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
     */
    private fun calculateGrade(grading: IntArray, criteria: Map<String, Any>): Int {
        val correctAnswers = grading.count { it == 1 }
        val totalQuestions = grading.size
        
        if (totalQuestions == 0) return 2
        
        val isPercentages = criteria["is_percentages"] as? Boolean ?: true
        
        return if (isPercentages) {
            // –†–µ–∂–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ - —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            val percentage = (correctAnswers.toDouble() / totalQuestions) * 100
            val grade5 = criteria["grade_5"] as? Int ?: 90
            val grade4 = criteria["grade_4"] as? Int ?: 75
            val grade3 = criteria["grade_3"] as? Int ?: 50
            val grade2 = criteria["grade_2"] as? Int ?: 0
            
            when {
                percentage >= grade5 -> 5  // 90% –∏ –±–æ–ª–µ–µ = 5
                percentage >= grade4 -> 4  // 75% –∏ –±–æ–ª–µ–µ, –Ω–æ –º–µ–Ω—å—à–µ 90% = 4
                percentage >= grade3 -> 3  // 50% –∏ –±–æ–ª–µ–µ, –Ω–æ –º–µ–Ω—å—à–µ 75% = 3
                percentage >= grade2 -> 2  // 0% –∏ –±–æ–ª–µ–µ, –Ω–æ –º–µ–Ω—å—à–µ 50% = 2
                else -> 2                 // –º–µ–Ω—å—à–µ 0% = 2
            }
        } else {
            // –†–µ–∂–∏–º –±–∞–ª–ª–æ–≤ - —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            val grade5 = criteria["grade_5"] as? Int ?: 5
            val grade4 = criteria["grade_4"] as? Int ?: 4
            val grade3 = criteria["grade_3"] as? Int ?: 3
            val grade2 = criteria["grade_2"] as? Int ?: 2
            
            when {
                correctAnswers >= grade5 -> 5  // 4 –∏ –±–æ–ª–µ–µ = 5
                correctAnswers >= grade4 -> 4  // —Ä–∞–≤–Ω–æ 3 –Ω–æ –º–µ–Ω—å—à–µ 4 = 4
                correctAnswers >= grade3 -> 3  // —Ä–∞–≤–Ω–æ 2 –Ω–æ –º–µ–Ω—å—à–µ 3 = 3
                correctAnswers >= grade2 -> 2  // –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0 –Ω–æ –º–µ–Ω—å—à–µ 2 = 2
                else -> 2
            }
        }
    }
    
    private fun showResetReportsDialog() {
        AlertDialog.Builder(this)
            .setTitle("üóëÔ∏è –°–±—Ä–æ—Å –æ—Ç—á–µ—Ç–æ–≤")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                val reports = reportsManager.getReports()
                reports.forEach { report ->
                    reportsManager.deleteReport(report.id)
                }
                loadReports()
                loadStatistics()
                Toast.makeText(this, "üóëÔ∏è –í—Å–µ –æ—Ç—á–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
} 