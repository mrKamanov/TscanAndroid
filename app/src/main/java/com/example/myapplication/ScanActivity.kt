package com.example.myapplication

// ===== –ò–ú–ü–û–†–¢–´ =====
// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.ImageButton
import android.widget.SeekBar
import android.widget.TextView
import android.widget.FrameLayout
import android.widget.ProgressBar
import androidx.appcompat.app.AppCompatActivity
import androidx.drawerlayout.widget.DrawerLayout
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import android.graphics.Bitmap
import android.widget.ImageView

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π (CameraX)
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import android.graphics.ImageFormat
import android.graphics.Rect
import android.graphics.YuvImage
import android.Manifest
import android.content.pm.PackageManager
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import android.content.SharedPreferences

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenCV (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
import org.opencv.android.OpenCVLoader
import android.util.Log

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ML –º–æ–¥–µ–ª—å—é
import com.example.myapplication.ml.OMRModelManager
import com.example.myapplication.ml.PredictionResult
import com.example.myapplication.models.OMRResult
import kotlinx.coroutines.*
import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.Color
import android.widget.Toast

class ScanActivity : AppCompatActivity() {
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ú–ï–†–û–ô =====
    private var cameraProvider: ProcessCameraProvider? = null
    private var cameraBound = false
    lateinit var previewView: PreviewView
    lateinit var resultOverlay: ImageView
    private lateinit var btnStartCamera: Button
    private lateinit var btnStopCamera: Button
    private lateinit var btnHideVideo: Button
    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
            if (isGranted) {
                startCamera()
            } else {
                android.widget.Toast.makeText(this, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É", android.widget.Toast.LENGTH_SHORT).show()
            }
        }

    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–¢–ö–û–ô –û–¢–í–ï–¢–û–í =====
    private lateinit var gridOverlay: android.widget.LinearLayout
    private lateinit var editQuestions: EditText
    private lateinit var editChoices: EditText
    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–í–ï–†–ö–ò =====
    private var lastGrading = mutableListOf<Int>()
    private var lastIncorrectQuestions = mutableListOf<Map<String, Any>>()

    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–£–ó–û–ô =====
    private var isPaused = false
    private var pausedFrame: Bitmap? = null
    private var pausedResult: String? = null
    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø UI –ú–ê–†–ö–ï–†–û–í =====
    private lateinit var resultsOverlay: android.widget.FrameLayout
    private var currentSelectedAnswers = IntArray(0)

    // ===== –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ï–†–´ (UI) =====
    private var brightness: Int = 0 // -100..+100
    private var contrast: Int = 100 // 0..200
    private var saturation: Int = 100 // 0..200
    private var sharpness: Int = 50 // 0..100
    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –†–ê–ë–û–¢–´ –° ML –ú–û–î–ï–õ–¨–Æ =====
    lateinit var omrModelManager: OMRModelManager
    var isModelReady = false
    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–¢–ß–ï–¢–ê–ú–ò =====
    private lateinit var reportsManager: com.example.myapplication.reports.ReportsManager
    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ù–û–í–û–ô –õ–û–ì–ò–ö–ò =====
    private var isContourFound = false // –ù–∞–π–¥–µ–Ω –ª–∏ –∫–æ–Ω—Ç—É—Ä –±–ª–∞–Ω–∫–∞
    private var lastContourBitmap: Bitmap? = null // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—É—Ä–æ–º
    private var isMLProcessing = false // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ ML –æ–±—Ä–∞–±–æ—Ç–∫–∞
    private val processingScope = CoroutineScope(Dispatchers.Default + SupervisorJob())
    

    
    // ===== –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø =====
    companion object {
        private const val PREFS_NAME = "CameraSettings"
        private const val KEY_BRIGHTNESS = "brightness"
        private const val KEY_CONTRAST = "contrast"
        private const val KEY_SATURATION = "saturation"
        private const val KEY_SHARPNESS = "sharpness"
        
        // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        private const val DEFAULT_BRIGHTNESS = 0
        private const val DEFAULT_CONTRAST = 100
        private const val DEFAULT_SATURATION = 100
        private const val DEFAULT_SHARPNESS = 50
    }
    
    // ===== –ú–ï–¢–û–î–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò =====
    private fun saveCameraSettings() {
        val prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE)
        prefs.edit().apply {
            putInt(KEY_BRIGHTNESS, brightness)
            putInt(KEY_CONTRAST, contrast)
            putInt(KEY_SATURATION, saturation)
            putInt(KEY_SHARPNESS, sharpness)
            apply()
        }
        Log.d("ScanActivity", "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    }
    
    private fun loadCameraSettings() {
        val prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE)
        brightness = prefs.getInt(KEY_BRIGHTNESS, DEFAULT_BRIGHTNESS)
        contrast = prefs.getInt(KEY_CONTRAST, DEFAULT_CONTRAST)
        saturation = prefs.getInt(KEY_SATURATION, DEFAULT_SATURATION)
        sharpness = prefs.getInt(KEY_SHARPNESS, DEFAULT_SHARPNESS)
        Log.d("ScanActivity", "üìÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    }
    
    private fun resetCameraSettings() {
        brightness = DEFAULT_BRIGHTNESS
        contrast = DEFAULT_CONTRAST
        saturation = DEFAULT_SATURATION
        sharpness = DEFAULT_SHARPNESS
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        findViewById<SeekBar>(R.id.seek_brightness)?.progress = brightness + 100
        findViewById<SeekBar>(R.id.seek_contrast)?.progress = contrast
        findViewById<SeekBar>(R.id.seek_saturation)?.progress = saturation
        findViewById<SeekBar>(R.id.seek_sharpness)?.progress = sharpness * 2 // 0..100 -> 0..200
        
        findViewById<TextView>(R.id.value_brightness)?.text = brightness.toString()
        findViewById<TextView>(R.id.value_contrast)?.text = contrast.toString()
        findViewById<TextView>(R.id.value_saturation)?.text = saturation.toString()
        findViewById<TextView>(R.id.value_sharpness)?.text = sharpness.toString()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        saveCameraSettings()
        
        android.widget.Toast.makeText(this, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", android.widget.Toast.LENGTH_SHORT).show()
    }

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò =====
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scan)

        // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø OPENCV –ò –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê =====
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenCV
        if (!OpenCVLoader.initDebug()) {
            Log.e("ScanActivity", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenCV")
        }

        // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (immersive mode)
        WindowCompat.setDecorFitsSystemWindows(window, false)
        val controller = WindowInsetsControllerCompat(window, window.decorView)
        controller.hide(WindowInsetsCompat.Type.systemBars())
        controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE

        // ===== –ó–ê–ì–†–£–ó–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö =====
        loadCameraSettings()
        
        // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ML –ú–û–î–ï–õ–ò =====
        initializeMLModel()

        // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI –≠–õ–ï–ú–ï–ù–¢–û–í =====
        val drawerLayout = findViewById<DrawerLayout>(R.id.drawer_layout)
        previewView = findViewById(R.id.camera_preview)
        resultOverlay = findViewById(R.id.result_overlay)
        btnStartCamera = findViewById(R.id.btn_drawer_start_camera)
        btnStopCamera = findViewById(R.id.btn_drawer_stop_camera)
        btnHideVideo = findViewById(R.id.btn_drawer_hide_video)
        val btnCameraSettings = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_camera_settings)
        val btnCloseCameraSettings = findViewById<ImageButton>(R.id.btn_close_camera_settings)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–µ—Ç–∫–∏
        gridOverlay = findViewById(R.id.grid_overlay)
        resultsOverlay = findViewById(R.id.results_overlay)
        editQuestions = findViewById(R.id.edit_questions)
        editChoices = findViewById(R.id.edit_choices)
        
        // ===== –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô –ò –°–û–ó–î–ê–ù–ò–ï –°–ï–¢–ö–ò =====
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        markerRenderer = com.example.myapplication.ui.MarkerRenderer(this)
        gridManager = com.example.myapplication.ui.GridManager(this, gridOverlay)
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        editQuestions.setText(gridManager.getQuestionsCount().toString())
        editChoices.setText(gridManager.getChoicesCount().toString())
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
        gridManager.createAnswersGrid()

        // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
        val scanResultsTextView = findViewById<TextView>(R.id.scan_results)
        scanResultsTextView?.text = android.text.Html.fromHtml("üìã <b>–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏...</b>", android.text.Html.FROM_HTML_MODE_COMPACT)

        // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –û–¢–ß–ï–¢–û–í =====
        reportsManager = com.example.myapplication.reports.ReportsManager(this)

        // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ú–ï–†–û–ô =====
        btnStartCamera.setOnClickListener {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {
                startCamera()
            } else {
                requestPermissionLauncher.launch(Manifest.permission.CAMERA)
            }
        }
        btnStopCamera.setOnClickListener {
            stopCamera()
        }
        btnHideVideo.setOnClickListener {
            if (previewView.visibility == View.VISIBLE) {
                previewView.visibility = View.INVISIBLE
                resultOverlay.visibility = View.INVISIBLE
                btnHideVideo.text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ"
            } else {
                previewView.visibility = View.VISIBLE
                resultOverlay.visibility = View.VISIBLE
                btnHideVideo.text = "–°–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ"
            }
        }
        // ===== –°–õ–ê–ô–î–ï–†–´ –ù–ê–°–¢–†–û–ï–ö –ö–ê–ú–ï–†–´ =====
        // –°–ª–∞–π–¥–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã
        val seekBrightness = findViewById<SeekBar?>(R.id.seek_brightness)
        val valueBrightness = findViewById<TextView?>(R.id.value_brightness)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        seekBrightness?.progress = brightness + 100
        valueBrightness?.text = brightness.toString()
        
        seekBrightness?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                valueBrightness?.text = (progress - 100).toString()
                brightness = progress - 100
                if (fromUser) saveCameraSettings()
            }
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })
        val seekContrast = findViewById<SeekBar?>(R.id.seek_contrast)
        val valueContrast = findViewById<TextView?>(R.id.value_contrast)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        seekContrast?.progress = contrast
        valueContrast?.text = contrast.toString()
        
        seekContrast?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                valueContrast?.text = progress.toString()
                contrast = progress
                if (fromUser) saveCameraSettings()
            }
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })
        val seekSaturation = findViewById<SeekBar?>(R.id.seek_saturation)
        val valueSaturation = findViewById<TextView?>(R.id.value_saturation)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        seekSaturation?.progress = saturation
        valueSaturation?.text = saturation.toString()
        
        seekSaturation?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                valueSaturation?.text = progress.toString()
                saturation = progress
                if (fromUser) saveCameraSettings()
            }
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })
        val seekSharpness = findViewById<SeekBar?>(R.id.seek_sharpness)
        val valueSharpness = findViewById<TextView?>(R.id.value_sharpness)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        seekSharpness?.progress = sharpness * 2 // 0..100 -> 0..200
        valueSharpness?.text = sharpness.toString()
        
        seekSharpness?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                valueSharpness?.text = (progress / 2).toString()
                sharpness = progress / 2
                if (fromUser) saveCameraSettings()
            }
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })

        // ===== –ö–ù–û–ü–ö–ê –°–ë–†–û–°–ê –ù–ê–°–¢–†–û–ï–ö =====
        val btnResetSettings = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_reset_camera_settings)
        btnResetSettings?.setOnClickListener {
            resetCameraSettings()
        }

        // ===== –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î –í–ò–î–ï–û–ü–û–¢–û–ö–û–ú =====
        // --- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–º ---
        val btnToggleGrid = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_toggle_grid)
        val btnUpdateAnswers = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_update_answers)


        btnToggleGrid.setOnClickListener {
            val newVisibility = !gridManager.isGridVisible()
            gridManager.setGridVisible(newVisibility)
            btnToggleGrid.setIconResource(
                if (newVisibility) R.drawable.ic_grid_on else R.drawable.ic_grid_off
            )
            // –û–±–Ω–æ–≤–ª—è–µ–º title –∫–Ω–æ–ø–∫–∏
            btnToggleGrid.contentDescription = if (newVisibility) "–°–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É" else "–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É"
            
            // –°–∫—Ä—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ç–∫–∏
            resultsOverlay.visibility = View.GONE
        }

        val btnToggleProcessing = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_toggle_processing)
        btnToggleProcessing.setOnClickListener {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            val showResults = resultsOverlay.visibility == View.GONE
            resultsOverlay.visibility = if (showResults && currentSelectedAnswers.isNotEmpty()) View.VISIBLE else View.GONE
            
            btnToggleProcessing.setIconResource(
                if (showResults) R.drawable.ic_check_circle else R.drawable.ic_cancel
            )
            btnToggleProcessing.backgroundTintList = android.content.res.ColorStateList.valueOf(
                resources.getColor(
                    if (showResults) R.color.success else R.color.error,
                    theme
                )
            )
            btnToggleProcessing.contentDescription = if (showResults) "–°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" else "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            
            val message = if (showResults) "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã" else "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä—ã—Ç—ã"
            android.widget.Toast.makeText(this, message, android.widget.Toast.LENGTH_SHORT).show()
        }

        btnUpdateAnswers.setOnClickListener {
            gridManager.updateCorrectAnswers()
            android.widget.Toast.makeText(this, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", android.widget.Toast.LENGTH_SHORT).show()
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
            findViewById<TextView>(R.id.scan_results)?.text = android.text.Html.fromHtml("üìã <b>–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏...</b>", android.text.Html.FROM_HTML_MODE_COMPACT)
            
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç
            findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_add_to_report)?.isEnabled = false
        }

        val btnStopFrame = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_stop_frame)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é (–±–ª–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω)
        btnStopFrame.isEnabled = false
        btnStopFrame.backgroundTintList = android.content.res.ColorStateList.valueOf(
            resources.getColor(android.R.color.darker_gray, theme)
        )
        btnStopFrame.strokeWidth = 2
        
        btnStopFrame.setOnClickListener {
            if (isPaused) {
                // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                isPaused = false
                isContourFound = false
                lastContourBitmap = null
                currentSelectedAnswers = IntArray(0)
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–∞—Ä–∫–µ—Ä—ã
                resultsOverlay.visibility = View.GONE
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                findViewById<TextView>(R.id.scan_results)?.text = android.text.Html.fromHtml("üìã <b>–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏...</b>", android.text.Html.FROM_HTML_MODE_COMPACT)
                
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç
                findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_add_to_report)?.isEnabled = false
                
                // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ø–∞—É–∑–∞" –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                btnStopFrame.setIconResource(R.drawable.stop_frame_button)
                btnStopFrame.contentDescription = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–¥—Ä –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å ML –æ–±—Ä–∞–±–æ—Ç–∫—É"
                btnStopFrame.isEnabled = false
                btnStopFrame.backgroundTintList = android.content.res.ColorStateList.valueOf(
                    resources.getColor(android.R.color.darker_gray, theme)
                )
                btnStopFrame.strokeWidth = 2
                
                android.widget.Toast.makeText(this, "–ü–æ–∏—Å–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω", android.widget.Toast.LENGTH_SHORT).show()
            } else if (isMLProcessing) {
                android.widget.Toast.makeText(this, "ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", android.widget.Toast.LENGTH_SHORT).show()
            } else if (isContourFound && lastContourBitmap != null && btnStopFrame.isEnabled) {
                // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º ML –æ–±—Ä–∞–±–æ—Ç–∫—É
                isPaused = true
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–∞–Ω–∫
                resultOverlay.setImageBitmap(lastContourBitmap)
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∂–µ –≥–æ—Ç–æ–≤–æ–≥–æ warp-–±–ª–∞–Ω–∫–∞
                processWarpedFrameWithML(lastContourBitmap!!)
                
                // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"
                btnStopFrame.setIconResource(R.drawable.ic_play_arrow)
                btnStopFrame.contentDescription = "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
                
                android.widget.Toast.makeText(this, "–ö–∞–¥—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...", android.widget.Toast.LENGTH_SHORT).show()
            } else if (!btnStopFrame.isEnabled) {
                android.widget.Toast.makeText(this, "–ö–æ–Ω—Ç—É—Ä –±–ª–∞–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–¥–Ω–µ—Å–∏—Ç–µ –±–ª–∞–Ω–∫ –∫ –∫–∞–º–µ—Ä–µ", android.widget.Toast.LENGTH_SHORT).show()
            }
        }

        val btnAddToReport = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_add_to_report)
        btnAddToReport.isEnabled = false // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        btnAddToReport.setOnClickListener {
            addToReport()
        }





        btnCameraSettings.setOnClickListener {
            drawerLayout.openDrawer(androidx.core.view.GravityCompat.END)
        }
        btnCloseCameraSettings.setOnClickListener {
            drawerLayout.closeDrawer(androidx.core.view.GravityCompat.END)
        }



        // --- –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é ---
        val btnNavHome = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_nav_home)
        val btnNavReports = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_nav_reports)

        btnNavHome.setOnClickListener {
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            val intent = android.content.Intent(this, MainActivity::class.java)
            intent.addFlags(android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP)
            startActivity(intent)
            finish()
        }
        btnNavReports.setOnClickListener {
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –æ—Ç—á—ë—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ—Ç ReportsActivity ‚Äî TODO)
            try {
                val intent = android.content.Intent(this, ReportsActivity::class.java)
                startActivity(intent)
            } catch (e: Exception) {
                android.widget.Toast.makeText(this, "–≠–∫—Ä–∞–Ω –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", android.widget.Toast.LENGTH_SHORT).show()
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" –¥–ª—è —Å–µ—Ç–∫–∏
        val btnApplyGridSettings = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_apply_grid_settings)
        btnApplyGridSettings.setOnClickListener {
            try {
                val newQuestions = editQuestions.text.toString().toInt()
                val newChoices = editChoices.text.toString().toInt()
                
                if (gridManager.applyGridSettings(newQuestions, newChoices)) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–µ—Ç–∫–∏
                    gridManager.setGridVisible(gridManager.isGridVisible())
                }
            } catch (e: NumberFormatException) {
                android.widget.Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞", android.widget.Toast.LENGTH_SHORT).show()
            }
        }

        // ===== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–≤ –ø—Ä–∞–≤–æ–º –º–µ–Ω—é) =====
        // –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º drawer (drawer_camera_settings.xml)
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ onCreate –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drawer

        // CameraX provider init (–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫)
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            cameraProvider = cameraProviderFuture.get()
        }, ContextCompat.getMainExecutor(this))
    }

    // ===== –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ö–ê–ú–ï–†–û–ô =====
    private fun startCamera() {
        if (cameraProvider == null || cameraBound) return
        val preview = Preview.Builder().build().also {
            it.setSurfaceProvider(previewView.surfaceProvider)
        }
        val imageAnalyzer = ImageAnalysis.Builder()
            .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
            .build()
        imageAnalyzer.setAnalyzer(ContextCompat.getMainExecutor(this), { imageProxy ->
            try {
                if (!isPaused) {
                    val rotationDegrees = imageProxy.imageInfo.rotationDegrees.toFloat()
                    val bitmap = imageProcessor.imageProxyToBitmap(imageProxy)
                    val rotatedBitmap = imageProcessor.rotateBitmap(bitmap, rotationDegrees)
                    
                    // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ —Å –ø–æ–º–æ—â—å—é OpenCV (–±—ã—Å—Ç—Ä–æ)
                    val (processedBitmap, contourFound) = imageProcessor.processFrameWithOpenCV(
                        rotatedBitmap, 
                        previewView.width, 
                        previewView.height,
                        gridManager.getQuestionsCount(),
                        gridManager.getChoicesCount(),
                        emptyList(), // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è ML –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        false, // –û—Ç–∫–ª—é—á–∞–µ–º ML –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        gridManager.isGridVisible(),

                        brightness,
                        contrast,
                        saturation,
                        sharpness
                    )
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞
                    if (contourFound && !isContourFound && !isPaused) {
                        isContourFound = true
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞–¥—Ä (—Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—É—Ä–æ–º)
                        lastContourBitmap = processedBitmap.copy(processedBitmap.config ?: Bitmap.Config.ARGB_8888, true)
                        Log.d("ScanActivity", "üéØ –ö–æ–Ω—Ç—É—Ä –±–ª–∞–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω! –ì–æ—Ç–æ–≤ –∫ ML –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                        
                        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                        runOnUiThread {
                            val btnStopFrame = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_stop_frame)
                            btnStopFrame.isEnabled = true
                            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –±–æ–ª–µ–µ —è—Ä–∫–∏–π
                            btnStopFrame.backgroundTintList = android.content.res.ColorStateList.valueOf(
                                resources.getColor(R.color.success, theme)
                            )
                            btnStopFrame.setStrokeColorResource(R.color.text_inverse)
                            btnStopFrame.strokeWidth = 6
                            Log.d("ScanActivity", "‚ú® –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω–∞ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º")
                        }
                    } else if (!contourFound && isContourFound && !isPaused) {
                        isContourFound = false
                        lastContourBitmap = null
                        Log.d("ScanActivity", "‚ùå –ö–æ–Ω—Ç—É—Ä –±–ª–∞–Ω–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω")
                        
                        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É - –¥–µ–ª–∞–µ–º —Å–µ—Ä–æ–π
                        runOnUiThread {
                            val btnStopFrame = findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_stop_frame)
                            btnStopFrame.isEnabled = false
                            btnStopFrame.backgroundTintList = android.content.res.ColorStateList.valueOf(
                                resources.getColor(android.R.color.darker_gray, theme)
                            )
                            btnStopFrame.setStrokeColorResource(R.color.text_inverse)
                            btnStopFrame.strokeWidth = 2
                            Log.d("ScanActivity", "üî¥ –ö–Ω–æ–ø–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å—Ç–∞–ª–∞ —Å–µ—Ä–æ–π")
                        }
                    }
                    
                    runOnUiThread {
                        resultOverlay.setImageBitmap(processedBitmap)
                    }
                }
                // –ï—Å–ª–∏ –Ω–∞ –ø–∞—É–∑–µ - –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä –≤–æ–æ–±—â–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            } catch (e: Exception) {
                Log.e("ScanActivity", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞: ${e.message}", e)
            } finally {
                imageProxy.close()
            }
        })
        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA
        cameraProvider?.unbindAll()
        cameraProvider?.bindToLifecycle(this, cameraSelector, preview, imageAnalyzer)
        cameraBound = true
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç ML –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∂–µ –≥–æ—Ç–æ–≤–æ–≥–æ warp-–±–ª–∞–Ω–∫–∞ (–±–µ–∑ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤)
     */
    private fun processWarpedFrameWithML(warpedBitmap: Bitmap) {
        if (isMLProcessing) return
        
        isMLProcessing = true
        Log.d("ScanActivity", "üöÄ –ù–∞—á–∏–Ω–∞–µ–º ML –æ–±—Ä–∞–±–æ—Ç–∫—É warp-–±–ª–∞–Ω–∫–∞...")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        runOnUiThread {
            findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.VISIBLE
            findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 0
            findViewById<TextView>(R.id.ml_progress_text).text = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ warp-–±–ª–∞–Ω–∫–∞..."
        }
        
        processingScope.launch {
            try {
                val startTime = System.currentTimeMillis()
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - warp-–±–ª–∞–Ω–∫ –≥–æ—Ç–æ–≤
                withContext(Dispatchers.Main) {
                    findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 40
                    findViewById<TextView>(R.id.ml_progress_text).text = "Warp-–±–ª–∞–Ω–∫ –≥–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º ML –∞–Ω–∞–ª–∏–∑..."
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                kotlinx.coroutines.delay(300)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - ML –æ–±—Ä–∞–±–æ—Ç–∫–∞
                withContext(Dispatchers.Main) {
                    findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 60
                    findViewById<TextView>(R.id.ml_progress_text).text = "ML –∞–Ω–∞–ª–∏–∑ —è—á–µ–µ–∫..."
                }
                
                val omrResult = imageProcessor.processWarpedFrameWithML(
                    warpedBitmap,
                    gridManager.getQuestionsCount(),
                    gridManager.getChoicesCount(),
                    gridManager.getCorrectAnswers()
                ) { question, choice, isFilled ->
                    // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è—á–µ–µ–∫
                    runOnUiThread {
                        val correctAnswers = gridManager.getCorrectAnswers()
                        val isReferenceCell = question < correctAnswers.size && choice == correctAnswers[question]
                        
                        if (isReferenceCell) {
                            // –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–∞–ø–∞ 1
                            val progress = 60 + (question * 30 / gridManager.getQuestionsCount())
                            findViewById<ProgressBar>(R.id.ml_progress_bar).progress = progress
                            findViewById<TextView>(R.id.ml_progress_text).text = 
                                "üéØ –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ ${question + 1}..."
                            
                            // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
                            val tempSelectedAnswers = IntArray(gridManager.getQuestionsCount()) { 0 }
                            tempSelectedAnswers[question] = if (isFilled) choice else 0
                            
                            val tempGrading = IntArray(gridManager.getQuestionsCount()) { 0 }
                            if (question < correctAnswers.size) {
                                tempGrading[question] = if (tempSelectedAnswers[question] == correctAnswers[question]) 1 else 0
                            }
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
                            markerRenderer.createUIMarkers(
                                resultsOverlay,
                                tempSelectedAnswers,
                                tempGrading,
                                correctAnswers,
                                gridManager.getQuestionsCount(),
                                gridManager.getChoicesCount()
                            )
                            
                            Log.d("ScanActivity", "üéØ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ [$question][$choice]")
                            
                        } else {
                            // –§–æ–Ω–æ–≤–∞—è —è—á–µ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–∞–ø–∞ 3
                            val progress = 90 + (question * 10 / gridManager.getQuestionsCount())
                            findViewById<ProgressBar>(R.id.ml_progress_bar).progress = progress
                            findViewById<TextView>(R.id.ml_progress_text).text = 
                                "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫: —è—á–µ–π–∫–∞ ${question + 1}-${choice + 1}..."
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —è—á–µ–µ–∫
                            val tempSelectedAnswers = IntArray(gridManager.getQuestionsCount()) { 0 }
                            tempSelectedAnswers[question] = if (isFilled) choice else 0
                            
                            val tempGrading = IntArray(gridManager.getQuestionsCount()) { 0 }
                            if (question < correctAnswers.size) {
                                tempGrading[question] = if (tempSelectedAnswers[question] == correctAnswers[question]) 1 else 0
                            }
                            
                            markerRenderer.createUIMarkers(
                                resultsOverlay,
                                tempSelectedAnswers,
                                tempGrading,
                                correctAnswers,
                                gridManager.getQuestionsCount(),
                                gridManager.getChoicesCount()
                            )
                            
                            Log.d("ScanActivity", "üîç –§–æ–Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —è—á–µ–π–∫–∏ [$question][$choice]")
                        }
                    }
                }
                
                val processingTime = System.currentTimeMillis() - startTime
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                withContext(Dispatchers.Main) {
                    findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 100
                    findViewById<TextView>(R.id.ml_progress_text).text = "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                kotlinx.coroutines.delay(300)
                
                if (omrResult != null) {
                    Log.d("ScanActivity", "‚úÖ ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ warp-–±–ª–∞–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}–º—Å")
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    withContext(Dispatchers.Main) {
                        updateUIWithResult(omrResult)
                        findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.GONE
                        android.widget.Toast.makeText(this@ScanActivity, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}–º—Å", android.widget.Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Log.d("ScanActivity", "‚ö†Ô∏è ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ warp-–±–ª–∞–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}–º—Å, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                    withContext(Dispatchers.Main) {
                        findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.GONE
                        android.widget.Toast.makeText(this@ScanActivity, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", android.widget.Toast.LENGTH_SHORT).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("ScanActivity", "‚ùå –û—à–∏–±–∫–∞ ML –æ–±—Ä–∞–±–æ—Ç–∫–∏ warp-–±–ª–∞–Ω–∫–∞: ${e.message}", e)
                withContext(Dispatchers.Main) {
                    findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.GONE
                    android.widget.Toast.makeText(this@ScanActivity, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}", android.widget.Toast.LENGTH_SHORT).show()
                }
            } finally {
                isMLProcessing = false
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç ML –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    private fun processFrameWithML(bitmap: Bitmap) {
        if (isMLProcessing) return
        
        isMLProcessing = true
        Log.d("ScanActivity", "üöÄ –ù–∞—á–∏–Ω–∞–µ–º ML –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–∞...")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        runOnUiThread {
            findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.VISIBLE
            findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 0
            findViewById<TextView>(R.id.ml_progress_text).text = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."
        }
        
        processingScope.launch {
            try {
                val startTime = System.currentTimeMillis()
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞
                withContext(Dispatchers.Main) {
                    findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 20
                    findViewById<TextView>(R.id.ml_progress_text).text = "–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ –±–ª–∞–Ω–∫–∞..."
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                kotlinx.coroutines.delay(500)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - ML –æ–±—Ä–∞–±–æ—Ç–∫–∞
                withContext(Dispatchers.Main) {
                    findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 40
                    findViewById<TextView>(R.id.ml_progress_text).text = "ML –∞–Ω–∞–ª–∏–∑ —è—á–µ–µ–∫..."
                }
                
                val omrResult = imageProcessor.processFrameWithML(
                    bitmap,
                    gridManager.getQuestionsCount(),
                    gridManager.getChoicesCount(),
                    gridManager.getCorrectAnswers()
                ) { question, choice, isFilled ->
                    // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è—á–µ–µ–∫
                    runOnUiThread {
                        val correctAnswers = gridManager.getCorrectAnswers()
                        val isReferenceCell = question < correctAnswers.size && choice == correctAnswers[question]
                        
                        if (isReferenceCell) {
                            // –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–∞–ø–∞ 1
                            val progress = 40 + (question * 60 / gridManager.getQuestionsCount())
                            findViewById<ProgressBar>(R.id.ml_progress_bar).progress = progress
                            findViewById<TextView>(R.id.ml_progress_text).text = 
                                "üéØ –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ ${question + 1}..."
                            
                            // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
                            val tempSelectedAnswers = IntArray(gridManager.getQuestionsCount()) { 0 }
                            tempSelectedAnswers[question] = if (isFilled) choice else 0
                            
                            val tempGrading = IntArray(gridManager.getQuestionsCount()) { 0 }
                            if (question < correctAnswers.size) {
                                tempGrading[question] = if (tempSelectedAnswers[question] == correctAnswers[question]) 1 else 0
                            }
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
                            markerRenderer.createUIMarkers(
                                resultsOverlay,
                                tempSelectedAnswers,
                                tempGrading,
                                correctAnswers,
                                gridManager.getQuestionsCount(),
                                gridManager.getChoicesCount()
                            )
                            
                            Log.d("ScanActivity", "üéØ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ [$question][$choice]")
                            
                        } else {
                            // –§–æ–Ω–æ–≤–∞—è —è—á–µ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–∞–ø–∞ 3
                            val progress = 80 + (question * 20 / gridManager.getQuestionsCount())
                            findViewById<ProgressBar>(R.id.ml_progress_bar).progress = progress
                            findViewById<TextView>(R.id.ml_progress_text).text = 
                                "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫: —è—á–µ–π–∫–∞ ${question + 1}-${choice + 1}..."
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —è—á–µ–µ–∫
                            val tempSelectedAnswers = IntArray(gridManager.getQuestionsCount()) { 0 }
                            tempSelectedAnswers[question] = if (isFilled) choice else 0
                            
                            val tempGrading = IntArray(gridManager.getQuestionsCount()) { 0 }
                            if (question < correctAnswers.size) {
                                tempGrading[question] = if (tempSelectedAnswers[question] == correctAnswers[question]) 1 else 0
                            }
                            
                            markerRenderer.createUIMarkers(
                                resultsOverlay,
                                tempSelectedAnswers,
                                tempGrading,
                                correctAnswers,
                                gridManager.getQuestionsCount(),
                                gridManager.getChoicesCount()
                            )
                            
                            Log.d("ScanActivity", "üîç –§–æ–Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —è—á–µ–π–∫–∏ [$question][$choice]")
                        }
                    }
                }
                
                val processingTime = System.currentTimeMillis() - startTime
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                withContext(Dispatchers.Main) {
                    findViewById<ProgressBar>(R.id.ml_progress_bar).progress = 100
                    findViewById<TextView>(R.id.ml_progress_text).text = "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                kotlinx.coroutines.delay(300)
                
                if (omrResult != null) {
                    Log.d("ScanActivity", "‚úÖ ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}–º—Å")
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    withContext(Dispatchers.Main) {
                        updateUIWithResult(omrResult)
                        findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.GONE
                        android.widget.Toast.makeText(this@ScanActivity, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}–º—Å", android.widget.Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Log.d("ScanActivity", "‚ö†Ô∏è ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}–º—Å, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                    withContext(Dispatchers.Main) {
                        findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.GONE
                        android.widget.Toast.makeText(this@ScanActivity, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", android.widget.Toast.LENGTH_SHORT).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("ScanActivity", "‚ùå –û—à–∏–±–∫–∞ ML –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}", e)
                withContext(Dispatchers.Main) {
                    findViewById<FrameLayout>(R.id.ml_progress_container).visibility = View.GONE
                    android.widget.Toast.makeText(this@ScanActivity, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}", android.widget.Toast.LENGTH_SHORT).show()
                }
            } finally {
                isMLProcessing = false
            }
        }
    }
    

    

    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
        private fun updateUIWithResult(omrResult: OMRResult) {
        Log.d("ScanActivity", "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: ${omrResult.grading.contentToString()}")
        currentSelectedAnswers = omrResult.selectedAnswers

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
        lastGrading.clear()
        lastGrading.addAll(omrResult.grading.toList())
        lastIncorrectQuestions.clear()
        lastIncorrectQuestions.addAll(omrResult.incorrectQuestions)

        markerRenderer.createUIMarkers(
            resultsOverlay,
            omrResult.selectedAnswers,
            omrResult.grading,
            omrResult.correctAnswers,
            gridManager.getQuestionsCount(),
            gridManager.getChoicesCount()
        )
        updateResultsUI(omrResult.grading, omrResult.incorrectQuestions)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
        if (!isPaused) {
            resultsOverlay.visibility = View.VISIBLE
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç
        findViewById<com.google.android.material.button.MaterialButton>(R.id.btn_add_to_report)?.isEnabled = true
    }

    private fun stopCamera() {
        cameraProvider?.unbindAll()
        cameraBound = false
    }

    // ===== –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ú–û–î–£–õ–ï–ô =====
    val imageProcessor = com.example.myapplication.processing.ImageProcessor()
    private lateinit var markerRenderer: com.example.myapplication.ui.MarkerRenderer
    lateinit var gridManager: com.example.myapplication.ui.GridManager
    

    

    

    
    // ===== –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–£–ó–û–ô –ò –û–¢–ß–ï–¢–ê–ú–ò =====
    private fun updateResultsUI(grading: IntArray, incorrectQuestions: List<Map<String, Any>>) {
        runOnUiThread {
            try {
                Log.d("ScanActivity", "–û–±–Ω–æ–≤–ª—è–µ–º UI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: grading=${grading.contentToString()}, incorrectQuestions=$incorrectQuestions")
                
                val correctCount = grading.sum()
                val questionsCount = gridManager.getQuestionsCount()
                val score = if (questionsCount > 0) (correctCount.toFloat() / questionsCount) * 100 else 0f
            
            // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            val resultText = buildString {
                appendLine("üìä <b>–ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>")
                appendLine()
                appendLine("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>$correctCount –∏–∑ $questionsCount</b>")
                appendLine("üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>${String.format("%.1f", score)}%</b>")
                appendLine()
                appendLine("üí° –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º TextView —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML)
            findViewById<TextView>(R.id.scan_results)?.text = android.text.Html.fromHtml(resultText, android.text.Html.FROM_HTML_MODE_COMPACT)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–∞—É–∑—ã
            pausedResult = resultText
            
            Log.d("ScanActivity", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: $correctCount/$questionsCount (${String.format("%.1f", score)}%)")
            } catch (e: Exception) {
                Log.e("ScanActivity", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${e.message}", e)
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                findViewById<TextView>(R.id.scan_results)?.text = android.text.Html.fromHtml(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</b><br/>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", 
                    android.text.Html.FROM_HTML_MODE_COMPACT
                )
            }
        }
    }
    

    
    private fun addToReport() {
        Log.d("ScanActivity", "üîç –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç...")
        Log.d("ScanActivity", "lastGrading.size: ${lastGrading.size}, currentSelectedAnswers.size: ${currentSelectedAnswers.size}")
        
        if (lastGrading.isNotEmpty() && currentSelectedAnswers.isNotEmpty()) {
            try {
                // –°–æ–∑–¥–∞–µ–º OMRResult –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                val omrResult = OMRResult(
                    selectedAnswers = currentSelectedAnswers,
                    grading = lastGrading.toIntArray(),
                    incorrectQuestions = lastIncorrectQuestions,
                    correctAnswers = gridManager.getCorrectAnswers().toList()
                )
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
                val workNumber = reportsManager.getReports().size + 1
                val title = "–†–∞–±–æ—Ç–∞ $workNumber"
                
                Log.d("ScanActivity", "üìã –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç: $title")
                Log.d("ScanActivity", "selectedAnswers: ${currentSelectedAnswers.contentToString()}")
                Log.d("ScanActivity", "grading: ${lastGrading.toIntArray().contentToString()}")
                Log.d("ScanActivity", "correctAnswers: ${gridManager.getCorrectAnswers().toList()}")
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
                val report = reportsManager.addReport(omrResult, title)
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                reportsManager.forceSave()
                
                android.widget.Toast.makeText(
                    this, 
                    "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç: $title", 
                    android.widget.Toast.LENGTH_LONG
                ).show()
                
                Log.d("ScanActivity", "üìã –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç: $title (–æ—Ü–µ–Ω–∫–∞: ${report.grade})")
                
            } catch (e: Exception) {
                Log.e("ScanActivity", "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç: ${e.message}", e)
                android.widget.Toast.makeText(
                    this, 
                    "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç: ${e.message}", 
                    android.widget.Toast.LENGTH_LONG
                ).show()
            }
        } else {
            Log.w("ScanActivity", "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç")
            android.widget.Toast.makeText(this, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç", android.widget.Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ML –º–æ–¥–µ–ª—å
     */
    private fun initializeMLModel() {
        Log.d("ScanActivity", "üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ML –º–æ–¥–µ–ª–∏")
        
        try {
            Log.d("ScanActivity", "üì¶ –°–æ–∑–¥–∞–µ–º OMRModelManager")
            omrModelManager = OMRModelManager(this)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            Log.d("ScanActivity", "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
            if (omrModelManager.isModelReady()) {
                isModelReady = true
                Log.i("ScanActivity", "‚úÖ ML –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                Toast.makeText(this, "ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞", Toast.LENGTH_SHORT).show()
                
                // –ü–µ—Ä–µ–¥–∞–µ–º ML –º–æ–¥–µ–ª—å –≤ ImageProcessor
                Log.d("ScanActivity", "üîó –ü–µ—Ä–µ–¥–∞–µ–º ML –º–æ–¥–µ–ª—å –≤ ImageProcessor")
                imageProcessor.setMLModel(omrModelManager)
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                Log.i("ScanActivity", omrModelManager.getModelInfo())
            } else {
                isModelReady = false
                Log.e("ScanActivity", "‚ùå ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                Toast.makeText(this, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ML –º–æ–¥–µ–ª–∏", Toast.LENGTH_LONG).show()
            }
        } catch (e: Exception) {
            isModelReady = false
            Log.e("ScanActivity", "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –º–æ–¥–µ–ª–∏: ${e.message}")
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –º–æ–¥–µ–ª–∏", Toast.LENGTH_LONG).show()
        }
        
        Log.d("ScanActivity", "üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: isModelReady=$isModelReady")
    }

    override fun onWindowFocusChanged(hasFocus: Boolean) {
        super.onWindowFocusChanged(hasFocus)
        if (hasFocus) {
            val controller = WindowInsetsControllerCompat(window, window.decorView)
            controller.hide(WindowInsetsCompat.Type.systemBars())
            controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
        }
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    override fun onDestroy() {
        super.onDestroy()
        
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∫–æ—Ä—É—Ç–∏–Ω—ã
        processingScope.cancel()
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã ML –º–æ–¥–µ–ª–∏
        if (::omrModelManager.isInitialized) {
            omrModelManager.release()
        }
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        lastContourBitmap?.recycle()
        lastContourBitmap = null
        pausedFrame?.recycle()
        pausedFrame = null
    }
} 