package com.example.myapplication.reports

import android.graphics.Color
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.cardview.widget.CardView
import androidx.recyclerview.widget.RecyclerView
import com.example.myapplication.R
import kotlin.math.roundToInt

class StatisticsAdapter : RecyclerView.Adapter<RecyclerView.ViewHolder>() {
    
    companion object {
        private const val TYPE_HEADER = 0
        private const val TYPE_STATS_CARDS = 1
        private const val TYPE_GRADE_DISTRIBUTION = 2
        private const val TYPE_ERROR_ANALYSIS = 3
        private const val TYPE_QUESTION_HEATMAP = 4
        private const val TYPE_RELATED_ERRORS = 5
    }
    
    private var statistics: Map<String, Any> = emptyMap()
    
    fun updateStatistics(newStatistics: Map<String, Any>) {
        Log.d("StatisticsAdapter", "üìä updateStatistics() –≤—ã–∑–≤–∞–Ω —Å ${newStatistics.size} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
        Log.d("StatisticsAdapter", "üìä –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: ${(newStatistics["questionHeatmap"] as? List<*>)?.size ?: 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        statistics = newStatistics
        Log.d("StatisticsAdapter", "üìä –í—ã–∑—ã–≤–∞–µ–º notifyDataSetChanged()")
        notifyDataSetChanged()
        Log.d("StatisticsAdapter", "üìä notifyDataSetChanged() –∑–∞–≤–µ—Ä—à–µ–Ω")
    }
    
    override fun getItemViewType(position: Int): Int {
        val viewType = when (position) {
            0 -> TYPE_HEADER
            1 -> TYPE_STATS_CARDS
            2 -> TYPE_GRADE_DISTRIBUTION
            3 -> TYPE_ERROR_ANALYSIS
            4 -> TYPE_QUESTION_HEATMAP
            5 -> TYPE_RELATED_ERRORS
            else -> TYPE_HEADER
        }
        Log.d("StatisticsAdapter", "üìä getItemViewType() –ø–æ–∑–∏—Ü–∏—è $position -> —Ç–∏–ø $viewType")
        return viewType
    }
    
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        Log.d("StatisticsAdapter", "üìä onCreateViewHolder() —Ç–∏–ø $viewType")
        return when (viewType) {
            TYPE_HEADER -> {
                val view = LayoutInflater.from(parent.context)
                    .inflate(R.layout.statistics_header, parent, false)
                HeaderViewHolder(view)
            }
            TYPE_STATS_CARDS -> {
                val view = LayoutInflater.from(parent.context)
                    .inflate(R.layout.statistics_cards, parent, false)
                StatsCardsViewHolder(view)
            }
            TYPE_GRADE_DISTRIBUTION -> {
                val view = LayoutInflater.from(parent.context)
                    .inflate(R.layout.grade_distribution_chart, parent, false)
                GradeDistributionViewHolder(view)
            }
            TYPE_ERROR_ANALYSIS -> {
                val view = LayoutInflater.from(parent.context)
                    .inflate(R.layout.error_analysis_chart, parent, false)
                ErrorAnalysisViewHolder(view)
            }
            TYPE_QUESTION_HEATMAP -> {
                Log.d("StatisticsAdapter", "üî• –°–æ–∑–¥–∞–µ–º QuestionHeatmapViewHolder")
                val view = LayoutInflater.from(parent.context)
                    .inflate(R.layout.question_heatmap_chart, parent, false)
                QuestionHeatmapViewHolder(view)
            }
            TYPE_RELATED_ERRORS -> {
                val view = LayoutInflater.from(parent.context)
                    .inflate(R.layout.related_errors_chart, parent, false)
                RelatedErrorsViewHolder(view)
            }
            else -> throw IllegalArgumentException("Unknown view type")
        }
    }
    
    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        Log.d("StatisticsAdapter", "üìä onBindViewHolder() –ø–æ–∑–∏—Ü–∏—è $position, —Ç–∏–ø ${holder.javaClass.simpleName}")
        when (holder) {
            is HeaderViewHolder -> holder.bind()
            is StatsCardsViewHolder -> holder.bind(statistics)
            is GradeDistributionViewHolder -> holder.bind(statistics["gradeDistribution"] as? Map<Int, Int> ?: emptyMap())
            is ErrorAnalysisViewHolder -> holder.bind(statistics["errorAnalysis"] as? List<Map<String, Any>> ?: emptyList())
            is QuestionHeatmapViewHolder -> {
                Log.d("StatisticsAdapter", "üî• –í—ã–∑—ã–≤–∞–µ–º QuestionHeatmapViewHolder.bind()")
                holder.bind(statistics["questionHeatmap"] as? List<Map<String, Any>> ?: emptyList())
            }
            is RelatedErrorsViewHolder -> holder.bind(statistics["relatedErrors"] as? List<Map<String, Any>> ?: emptyList())
        }
    }
    
    override fun getItemCount(): Int = 6
    
    class HeaderViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        fun bind() {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ layout
        }
    }
    
    class StatsCardsViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val cardTotalWorks: CardView = itemView.findViewById(R.id.card_total_works)
        private val cardAverageGrade: CardView = itemView.findViewById(R.id.card_average_grade)
        private val cardSuccessRate: CardView = itemView.findViewById(R.id.card_success_rate)
        private val cardBestResult: CardView = itemView.findViewById(R.id.card_best_result)
        
        private val tvTotalWorks: TextView = itemView.findViewById(R.id.tv_total_works_value)
        private val tvAverageGrade: TextView = itemView.findViewById(R.id.tv_average_grade_value)
        private val tvSuccessRate: TextView = itemView.findViewById(R.id.tv_success_rate_value)
        private val tvBestResult: TextView = itemView.findViewById(R.id.tv_best_result_value)
        private val tvSouValue: TextView = itemView.findViewById(R.id.tv_sou_value)
        
        fun bind(statistics: Map<String, Any>) {
            val totalWorks = statistics["totalWorks"] as? Int ?: 0
            val averageGrade = statistics["averageGrade"] as? Double ?: 0.0
            val successRate = statistics["successRate"] as? Double ?: 0.0
            val gradeDistribution = statistics["gradeDistribution"] as? Map<Int, Int> ?: emptyMap()
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
            val worksText = when {
                totalWorks == 0 -> "0 —Ä–∞–±–æ—Ç"
                totalWorks == 1 -> "1 —Ä–∞–±–æ—Ç–∞"
                totalWorks < 5 -> "$totalWorks —Ä–∞–±–æ—Ç—ã"
                else -> "$totalWorks —Ä–∞–±–æ—Ç"
            }
            
            tvTotalWorks.text = worksText
            tvAverageGrade.text = String.format("%.1f", averageGrade)
            tvSuccessRate.text = String.format("%.0f%%", successRate)
            
            // –†–∞—Å—á–µ—Ç –ö–∞—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π (–ö–ó)
            val grade4Count = gradeDistribution[4] ?: 0
            val grade5Count = gradeDistribution[5] ?: 0
            val qualityKnowledge = if (totalWorks > 0) {
                ((grade4Count + grade5Count).toDouble() / totalWorks) * 100
            } else 0.0
            
            tvBestResult.text = String.format("–ö/–∑ %.0f%%", qualityKnowledge)
            
            // –†–∞—Å—á–µ—Ç –°—Ç–µ–ø–µ–Ω–∏ –æ–±—É—á–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—â–∏—Ö—Å—è (–°–û–£)
            val grade2Count = gradeDistribution[2] ?: 0
            val grade3Count = gradeDistribution[3] ?: 0
            val sou = if (totalWorks > 0) {
                ((grade5Count * 1.0) + (grade4Count * 0.64) + (grade3Count * 0.36) + (grade2Count * 0.16)) / totalWorks * 100
            } else 0.0
            
            tvSouValue.text = String.format("–°–û–£ %.0f%%", sou)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
            cardTotalWorks.setCardBackgroundColor(Color.parseColor("#4CAF50"))
            cardAverageGrade.setCardBackgroundColor(Color.parseColor("#2196F3"))
            cardSuccessRate.setCardBackgroundColor(Color.parseColor("#FF9800"))
            cardBestResult.setCardBackgroundColor(Color.parseColor("#9C27B0"))
        }
    }
    
    class GradeDistributionViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val container: LinearLayout = itemView.findViewById(R.id.grade_distribution_container)
        private val tvTitle: TextView = itemView.findViewById(R.id.tv_grade_distribution_title)
        
        fun bind(gradeDistribution: Map<Int, Int>) {
            tvTitle.text = "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫"
            container.removeAllViews()
            
            val total = gradeDistribution.values.sum()
            if (total == 0) {
                val emptyText = TextView(itemView.context).apply {
                    text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    setTextColor(Color.GRAY)
                    textAlignment = View.TEXT_ALIGNMENT_CENTER
                    setPadding(0, 20, 0, 20)
                }
                container.addView(emptyText)
                return
            }
            
            gradeDistribution.entries.sortedBy { it.key }.forEach { (grade, count) ->
                val percentage = if (total > 0) (count.toDouble() / total * 100) else 0.0
                val gradeView = createGradeBar(itemView.context, grade, count, percentage)
                container.addView(gradeView)
            }
        }
        
        private fun createGradeBar(context: android.content.Context, grade: Int, count: Int, percentage: Double): View {
            val layout = LinearLayout(context).apply {
                orientation = LinearLayout.VERTICAL
                setPadding(0, 8, 0, 8)
            }
            
            val headerLayout = LinearLayout(context).apply {
                orientation = LinearLayout.HORIZONTAL
                setPadding(0, 0, 0, 4)
            }
            
            val tvGrade = TextView(context).apply {
                text = "–û—Ü–µ–Ω–∫–∞ $grade"
                setTextColor(Color.WHITE)
                layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f)
            }
            
            val tvCount = TextView(context).apply {
                val worksText = when {
                    count == 0 -> "0 —Ä–∞–±–æ—Ç"
                    count == 1 -> "1 —Ä–∞–±–æ—Ç–∞"
                    count < 5 -> "$count —Ä–∞–±–æ—Ç—ã"
                    else -> "$count —Ä–∞–±–æ—Ç"
                }
                text = "$worksText (${String.format("%.0f", percentage)}%)"
                setTextColor(Color.WHITE)
                textAlignment = View.TEXT_ALIGNMENT_TEXT_END
            }
            
            headerLayout.addView(tvGrade)
            headerLayout.addView(tvCount)
            
            val progressBar = ProgressBar(context, null, android.R.attr.progressBarStyleHorizontal).apply {
                max = 100
                progress = percentage.roundToInt()
                progressTintList = android.content.res.ColorStateList.valueOf(getGradeColor(grade))
                setPadding(0, 4, 0, 0)
            }
            
            layout.addView(headerLayout)
            layout.addView(progressBar)
            
            return layout
        }
        
        private fun getGradeColor(grade: Int): Int {
            return when (grade) {
                2 -> Color.parseColor("#F44336") // –ö—Ä–∞—Å–Ω—ã–π
                3 -> Color.parseColor("#FF9800") // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                4 -> Color.parseColor("#FFC107") // –ñ–µ–ª—Ç—ã–π
                5 -> Color.parseColor("#4CAF50") // –ó–µ–ª–µ–Ω—ã–π
                else -> Color.GRAY
            }
        }
    }
    
    class ErrorAnalysisViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val container: LinearLayout = itemView.findViewById(R.id.error_analysis_container)
        private val tvTitle: TextView = itemView.findViewById(R.id.tv_error_analysis_title)
        
        fun bind(errorAnalysis: List<Map<String, Any>>) {
            tvTitle.text = "‚ùå –¢–æ–ø-5 —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
            container.removeAllViews()
            
            if (errorAnalysis.isEmpty()) {
                val emptyText = TextView(itemView.context).apply {
                    text = "–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    setTextColor(Color.GRAY)
                    textAlignment = View.TEXT_ALIGNMENT_CENTER
                    setPadding(0, 20, 0, 20)
                }
                container.addView(emptyText)
                return
            }
            
            errorAnalysis.forEach { error ->
                val question = error["question"] as? Int ?: 0
                val errors = error["errors"] as? Int ?: 0
                val percentage = error["percentage"] as? Double ?: 0.0
                
                val errorView = createErrorItem(itemView.context, question, errors, percentage)
                container.addView(errorView)
            }
        }
        
        private fun createErrorItem(context: android.content.Context, question: Int, errors: Int, percentage: Double): View {
            val layout = LinearLayout(context).apply {
                orientation = LinearLayout.HORIZONTAL
                setPadding(0, 8, 0, 8)
                gravity = android.view.Gravity.CENTER_VERTICAL
            }
            
            val tvQuestion = TextView(context).apply {
                text = "–í–æ–ø—Ä–æ—Å $question"
                setTextColor(Color.WHITE)
                layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f)
            }
            
            val tvErrors = TextView(context).apply {
                val errorsText = when {
                    errors == 0 -> "0 –æ—à–∏–±–æ–∫"
                    errors == 1 -> "1 –æ—à–∏–±–∫–∞"
                    errors < 5 -> "$errors –æ—à–∏–±–∫–∏"
                    else -> "$errors –æ—à–∏–±–æ–∫"
                }
                text = "$errorsText (${String.format("%.0f", percentage)}%)"
                setTextColor(Color.parseColor("#FF6B6B"))
                textAlignment = View.TEXT_ALIGNMENT_TEXT_END
            }
            
            layout.addView(tvQuestion)
            layout.addView(tvErrors)
            
            return layout
        }
    }
    
    class QuestionHeatmapViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val container: LinearLayout = itemView.findViewById(R.id.question_heatmap_container)
        private val tvTitle: TextView = itemView.findViewById(R.id.tv_question_heatmap_title)
        
        fun bind(questionHeatmap: List<Map<String, Any>>) {
            Log.d("StatisticsAdapter", "üî• QuestionHeatmapViewHolder.bind() –≤—ã–∑–≤–∞–Ω —Å ${questionHeatmap.size} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            
            tvTitle.text = "üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"
            container.removeAllViews()
            
            if (questionHeatmap.isEmpty()) {
                Log.w("StatisticsAdapter", "üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—É—Å—Ç–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                val emptyText = TextView(itemView.context).apply {
                    text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    setTextColor(Color.GRAY)
                    textAlignment = View.TEXT_ALIGNMENT_CENTER
                    setPadding(0, 20, 0, 20)
                }
                container.addView(emptyText)
                return
            }
            
            Log.d("StatisticsAdapter", "üî• –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è ${questionHeatmap.size} –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            val pieChartView = createPieChart(itemView.context, questionHeatmap)
            container.addView(pieChartView)
            
            // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
            val legendView = createLegend(itemView.context, questionHeatmap)
            container.addView(legendView)
            
            Log.d("StatisticsAdapter", "üî• –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞")
        }
        
        private fun createPieChart(context: android.content.Context, questionHeatmap: List<Map<String, Any>>): View {
            val pieChartView = object : View(context) {
                override fun onDraw(canvas: android.graphics.Canvas) {
                    super.onDraw(canvas)
                    
                    val centerX = width / 2f
                    val centerY = height / 2f
                    val radius = minOf(width, height) / 2f - 20f
                    
                    val paint = android.graphics.Paint().apply {
                        isAntiAlias = true
                        style = android.graphics.Paint.Style.FILL
                    }
                    
                    val totalQuestions = questionHeatmap.size
                    val sweepAngle = 360f / totalQuestions
                    
                    questionHeatmap.forEachIndexed { index, question ->
                        val successRate = question["successRate"] as? Double ?: 0.0
                        val startAngle = index * sweepAngle
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                        val color = when {
                            successRate >= 80 -> Color.parseColor("#4CAF50") // –ó–µ–ª–µ–Ω—ã–π
                            successRate >= 60 -> Color.parseColor("#8BC34A") // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                            successRate >= 40 -> Color.parseColor("#FFC107") // –ñ–µ–ª—Ç—ã–π
                            successRate >= 20 -> Color.parseColor("#FF9800") // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                            else -> Color.parseColor("#F44336") // –ö—Ä–∞—Å–Ω—ã–π
                        }
                        
                        paint.color = color
                        
                        // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä
                        val rect = android.graphics.RectF(centerX - radius, centerY - radius, centerX + radius, centerY + radius)
                        canvas.drawArc(rect, startAngle, sweepAngle, true, paint)
                        
                        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É —Å–µ–∫—Ç–æ—Ä–∞
                        paint.style = android.graphics.Paint.Style.STROKE
                        paint.strokeWidth = 2f
                        paint.color = Color.WHITE
                        canvas.drawArc(rect, startAngle, sweepAngle, true, paint)
                        paint.style = android.graphics.Paint.Style.FILL
                    }
                }
            }
            
            pieChartView.layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                300
            )
            pieChartView.setPadding(0, 16, 0, 16)
            
            return pieChartView
        }
        
        private fun createLegend(context: android.content.Context, questionHeatmap: List<Map<String, Any>>): View {
            val legendLayout = LinearLayout(context).apply {
                orientation = LinearLayout.VERTICAL
                setPadding(16, 0, 16, 16)
            }
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ü–≤–µ—Ç–∞–º
            val colorGroups = mutableMapOf<Int, MutableList<Map<String, Any>>>()
            
            questionHeatmap.forEach { question ->
                val successRate = question["successRate"] as? Double ?: 0.0
                val color = when {
                    successRate >= 80 -> Color.parseColor("#4CAF50")
                    successRate >= 60 -> Color.parseColor("#8BC34A")
                    successRate >= 40 -> Color.parseColor("#FFC107")
                    successRate >= 20 -> Color.parseColor("#FF9800")
                    else -> Color.parseColor("#F44336")
                }
                
                colorGroups.getOrPut(color) { mutableListOf() }.add(question)
            }
            
            // –°–æ–∑–¥–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            colorGroups.forEach { (color, questions) ->
                val groupLayout = LinearLayout(context).apply {
                    orientation = LinearLayout.HORIZONTAL
                    setPadding(0, 4, 0, 4)
                    gravity = android.view.Gravity.CENTER_VERTICAL
                }
                
                // –¶–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                val colorIndicator = View(context).apply {
                    layoutParams = LinearLayout.LayoutParams(16, 16)
                    setBackgroundColor(color)
                }
                
                // –¢–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
                val questionsText = questions.joinToString(", ") { 
                    "–í–æ–ø—Ä–æ—Å ${it["question"]}" 
                }
                val successRate = questions.first()["successRate"] as? Double ?: 0.0
                
                val legendText = TextView(context).apply {
                    text = "$questionsText (${String.format("%.0f", successRate)}%)"
                    setTextColor(Color.WHITE)
                    textSize = 12f
                    layoutParams = LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                    ).apply {
                        marginStart = 8
                    }
                }
                
                groupLayout.addView(colorIndicator)
                groupLayout.addView(legendText)
                legendLayout.addView(groupLayout)
            }
            
            return legendLayout
        }
    }
    
    class RelatedErrorsViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val container: LinearLayout = itemView.findViewById(R.id.related_errors_container)
        private val tvTitle: TextView = itemView.findViewById(R.id.tv_related_errors_title)
        
        fun bind(relatedErrors: List<Map<String, Any>>) {
            tvTitle.text = "üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"
            container.removeAllViews()
            
            if (relatedErrors.isEmpty()) {
                val emptyText = TextView(itemView.context).apply {
                    text = "–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    setTextColor(Color.GRAY)
                    textAlignment = View.TEXT_ALIGNMENT_CENTER
                    setPadding(0, 20, 0, 20)
                }
                container.addView(emptyText)
                return
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            val descriptionText = TextView(itemView.context).apply {
                text = "–í–æ–ø—Ä–æ—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–µ–Ω–∏–∫–∏ —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
                setTextColor(Color.parseColor("#B0B0B0"))
                textSize = 12f
                setPadding(0, 0, 0, 16)
            }
            container.addView(descriptionText)
            
            relatedErrors.forEach { error ->
                val question1 = error["question1"] as? Int ?: 0
                val question2 = error["question2"] as? Int ?: 0
                val bothWrong = error["bothWrong"] as? Int ?: 0
                val correlation = error["correlation"] as? Double ?: 0.0
                val totalWorks = error["totalWorks"] as? Int ?: 0
                
                val errorView = createRelatedErrorItem(itemView.context, question1, question2, bothWrong, correlation, totalWorks)
                container.addView(errorView)
            }
        }
        
        private fun createRelatedErrorItem(context: android.content.Context, question1: Int, question2: Int, bothWrong: Int, correlation: Double, totalWorks: Int): View {
            val layout = LinearLayout(context).apply {
                orientation = LinearLayout.VERTICAL
                setPadding(0, 8, 0, 8)
            }
            
            val headerLayout = LinearLayout(context).apply {
                orientation = LinearLayout.HORIZONTAL
                setPadding(0, 0, 0, 4)
            }
            
            val tvQuestions = TextView(context).apply {
                text = "–í–æ–ø—Ä–æ—Å—ã $question1 –∏ $question2"
                setTextColor(Color.WHITE)
                layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f)
            }
            
            val tvPercentage = TextView(context).apply {
                text = "${String.format("%.0f", correlation * 100)}% —Ä–∞–±–æ—Ç"
                setTextColor(Color.parseColor("#FF6B6B"))
                textAlignment = View.TEXT_ALIGNMENT_TEXT_END
            }
            
            headerLayout.addView(tvQuestions)
            headerLayout.addView(tvPercentage)
            
            val detailText = TextView(context).apply {
                text = "–û–±–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—à–∏–±–æ—á–Ω—ã –≤ $bothWrong –∏–∑ $totalWorks —Ä–∞–±–æ—Ç"
                setTextColor(Color.parseColor("#B0B0B0"))
                textSize = 12f
                setPadding(0, 4, 0, 0)
            }
            
            layout.addView(headerLayout)
            layout.addView(detailText)
            
            return layout
        }
    }
} 