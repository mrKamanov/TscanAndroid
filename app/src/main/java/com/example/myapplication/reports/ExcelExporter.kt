package com.example.myapplication.reports

import android.content.Context
import android.util.Log
import org.apache.poi.ss.usermodel.*
import org.apache.poi.ss.util.CellRangeAddress
import org.apache.poi.xssf.usermodel.XSSFWorkbook
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*
import android.os.Environment

class ExcelExporter(private val context: Context) {
    
    companion object {
        private const val TAG = "ExcelExporter"
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã –≤ Excel —Ñ–∞–π–ª
     */
    fun exportToExcel(reportsManager: ReportsManager): File? {
        try {
            val workbook = XSSFWorkbook()
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
            val headerStyle = createHeaderStyle(workbook)
            val dataStyle = createDataStyle(workbook)
            val titleStyle = createTitleStyle(workbook)
            
            // –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            createGeneralStatisticsSheet(workbook, reportsManager, headerStyle, dataStyle, titleStyle)
            
            // –õ–∏—Å—Ç 2: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            createDetailedResultsSheet(workbook, reportsManager, headerStyle, dataStyle, titleStyle)
            
            // –õ–∏—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            createQuestionAnalysisSheet(workbook, reportsManager, headerStyle, dataStyle, titleStyle)
            
            // –õ–∏—Å—Ç 4: –ì—Ä–∞—Ñ–∏–∫–∏
            createChartsSheet(workbook, reportsManager, headerStyle, dataStyle, titleStyle)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            val fileName = "OMR_–û—Ç—á–µ—Ç_${SimpleDateFormat("dd_MM_yyyy_HH_mm", Locale.getDefault()).format(Date())}.xlsx"
            val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
            val file = File(downloadsDir, fileName)
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!downloadsDir.exists()) {
                downloadsDir.mkdirs()
            }
            
            FileOutputStream(file).use { fos ->
                workbook.write(fos)
            }
            workbook.close()
            
            Log.d(TAG, "‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${file.absolutePath}")
            return file
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞", e)
            return null
        }
    }
    
    private fun createHeaderStyle(workbook: Workbook): CellStyle {
        val style = workbook.createCellStyle()
        val font = workbook.createFont()
        font.bold = true
        font.color = IndexedColors.WHITE.index
        style.setFont(font)
        style.fillForegroundColor = IndexedColors.DARK_BLUE.index
        style.fillPattern = FillPatternType.SOLID_FOREGROUND
        style.borderBottom = BorderStyle.THIN
        style.borderTop = BorderStyle.THIN
        style.borderRight = BorderStyle.THIN
        style.borderLeft = BorderStyle.THIN
        style.alignment = HorizontalAlignment.CENTER
        return style
    }
    
    private fun createDataStyle(workbook: Workbook): CellStyle {
        val style = workbook.createCellStyle()
        style.borderBottom = BorderStyle.THIN
        style.borderTop = BorderStyle.THIN
        style.borderRight = BorderStyle.THIN
        style.borderLeft = BorderStyle.THIN
        style.alignment = HorizontalAlignment.CENTER
        return style
    }
    
    private fun createTitleStyle(workbook: Workbook): CellStyle {
        val style = workbook.createCellStyle()
        val font = workbook.createFont()
        font.bold = true
        font.fontHeightInPoints = 14
        style.setFont(font)
        style.alignment = HorizontalAlignment.CENTER
        return style
    }
    
    private fun createGeneralStatisticsSheet(workbook: Workbook, reportsManager: ReportsManager, headerStyle: CellStyle, dataStyle: CellStyle, titleStyle: CellStyle) {
        val sheet = workbook.createSheet("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        val statistics = reportsManager.getStatistics()
        
        var rowNum = 0
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        val titleRow = sheet.createRow(rowNum++)
        val titleCell = titleRow.createCell(0)
        titleCell.setCellValue("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢")
        titleCell.cellStyle = titleStyle
        sheet.addMergedRegion(CellRangeAddress(0, 0, 0, 3))
        
        rowNum++ // –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        val totalWorks = statistics["totalWorks"] as? Int ?: 0
        val averageGrade = statistics["averageGrade"] as? Double ?: 0.0
        val successRate = statistics["successRate"] as? Double ?: 0.0
        val gradeDistribution = statistics["gradeDistribution"] as? Map<Int, Int> ?: emptyMap()
        
        // –†–∞—Å—á–µ—Ç –ö–ó –∏ –°–û–£
        val grade4Count = gradeDistribution[4] ?: 0
        val grade5Count = gradeDistribution[5] ?: 0
        val grade2Count = gradeDistribution[2] ?: 0
        val grade3Count = gradeDistribution[3] ?: 0
        
        val qualityKnowledge = if (totalWorks > 0) {
            ((grade4Count + grade5Count).toDouble() / totalWorks) * 100
        } else 0.0
        
        val sou = if (totalWorks > 0) {
            ((grade5Count * 1.0) + (grade4Count * 0.64) + (grade3Count * 0.36) + (grade2Count * 0.16)) / totalWorks * 100
        } else 0.0
        
        // –¢–∞–±–ª–∏—Ü–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        val metricsData = listOf(
            listOf("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"),
            listOf("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç", totalWorks.toString()),
            listOf("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", String.format("%.1f", averageGrade)),
            listOf("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏", String.format("%.0f%%", successRate)),
            listOf("–ö–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π (–ö–ó)", String.format("%.0f%%", qualityKnowledge)),
            listOf("–°—Ç–µ–ø–µ–Ω—å –æ–±—É—á–µ–Ω–Ω–æ—Å—Ç–∏ (–°–û–£)", String.format("%.0f%%", sou))
        )
        
        metricsData.forEachIndexed { index, rowData ->
            val row = sheet.createRow(rowNum++)
            rowData.forEachIndexed { colIndex, value ->
                val cell = row.createCell(colIndex)
                cell.setCellValue(value)
                cell.cellStyle = if (index == 0) headerStyle else dataStyle
            }
        }
        
        rowNum++ // –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        val gradeRow = sheet.createRow(rowNum++)
        val gradeCell = gradeRow.createCell(0)
        gradeCell.setCellValue("üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–¶–ï–ù–û–ö")
        gradeCell.cellStyle = titleStyle
        sheet.addMergedRegion(CellRangeAddress(rowNum - 1, rowNum - 1, 0, 3))
        
        rowNum++
        
        val gradeHeaderRow = sheet.createRow(rowNum++)
        val gradeHeaders = listOf("–û—Ü–µ–Ω–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç")
        gradeHeaders.forEachIndexed { index, header ->
            val cell = gradeHeaderRow.createCell(index)
            cell.setCellValue(header)
            cell.cellStyle = headerStyle
        }
        
        gradeDistribution.entries.sortedBy { it.key }.forEach { (grade, count) ->
            val percentage = if (totalWorks > 0) (count.toDouble() / totalWorks * 100) else 0.0
            val row = sheet.createRow(rowNum++)
            
            val gradeCell = row.createCell(0)
            gradeCell.setCellValue(grade.toDouble())
            gradeCell.cellStyle = dataStyle
            
            val countCell = row.createCell(1)
            countCell.setCellValue(count.toDouble())
            countCell.cellStyle = dataStyle
            
            val percentCell = row.createCell(2)
            percentCell.setCellValue(String.format("%.1f%%", percentage))
            percentCell.cellStyle = dataStyle
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        sheet.setColumnWidth(0, 6000) // –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å - —à–∏—Ä–µ
        sheet.setColumnWidth(1, 3000) // –ó–Ω–∞—á–µ–Ω–∏–µ
        sheet.setColumnWidth(2, 2000) // –û—Ü–µ–Ω–∫–∞
        sheet.setColumnWidth(3, 3000) // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        sheet.setColumnWidth(4, 2000) // –ü—Ä–æ—Ü–µ–Ω—Ç
    }
    
    private fun createDetailedResultsSheet(workbook: Workbook, reportsManager: ReportsManager, headerStyle: CellStyle, dataStyle: CellStyle, titleStyle: CellStyle) {
        val sheet = workbook.createSheet("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        val reports = reportsManager.getReports()
        
        var rowNum = 0
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        val titleRow = sheet.createRow(rowNum++)
        val titleCell = titleRow.createCell(0)
        titleCell.setCellValue("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–°–ï–• –†–ê–ë–û–¢")
        titleCell.cellStyle = titleStyle
        sheet.addMergedRegion(CellRangeAddress(0, 0, 0, 6))
        
        rowNum++
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        val headerRow = sheet.createRow(rowNum++)
        val headers = listOf("‚Ññ", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–í—Å–µ–≥–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç", "–û—Ü–µ–Ω–∫–∞")
        headers.forEachIndexed { index, header ->
            val cell = headerRow.createCell(index)
            cell.setCellValue(header)
            cell.cellStyle = headerStyle
        }
        
        // –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç
        reports.forEach { report ->
            val row = sheet.createRow(rowNum++)
            
            val correctAnswers = report.omrResult.grading.count { it == 1 }
            val totalQuestions = report.omrResult.grading.size
            val percentage = if (totalQuestions > 0) (correctAnswers.toDouble() / totalQuestions * 100) else 0.0
            
            row.createCell(0).apply { setCellValue(report.workNumber.toDouble()); cellStyle = dataStyle }
            row.createCell(1).apply { setCellValue(report.title); cellStyle = dataStyle }
            row.createCell(2).apply { setCellValue(report.date); cellStyle = dataStyle }
            row.createCell(3).apply { setCellValue(correctAnswers.toDouble()); cellStyle = dataStyle }
            row.createCell(4).apply { setCellValue(totalQuestions.toDouble()); cellStyle = dataStyle }
            row.createCell(5).apply { setCellValue(String.format("%.1f%%", percentage)); cellStyle = dataStyle }
            row.createCell(6).apply { setCellValue(report.grade.toDouble()); cellStyle = dataStyle }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        sheet.setColumnWidth(0, 1000) // ‚Ññ
        sheet.setColumnWidth(1, 4000) // –ù–∞–∑–≤–∞–Ω–∏–µ
        sheet.setColumnWidth(2, 5000) // –î–∞—Ç–∞ - —à–∏—Ä–µ
        sheet.setColumnWidth(3, 2000) // –ü—Ä–∞–≤–∏–ª—å–Ω–æ
        sheet.setColumnWidth(4, 2000) // –í—Å–µ–≥–æ
        sheet.setColumnWidth(5, 2000) // –ü—Ä–æ—Ü–µ–Ω—Ç
        sheet.setColumnWidth(6, 1500) // –û—Ü–µ–Ω–∫–∞
    }
    
    private fun createQuestionAnalysisSheet(workbook: Workbook, reportsManager: ReportsManager, headerStyle: CellStyle, dataStyle: CellStyle, titleStyle: CellStyle) {
        val sheet = workbook.createSheet("–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤")
        val statistics = reportsManager.getStatistics()
        
        var rowNum = 0
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        val titleRow = sheet.createRow(rowNum++)
        val titleCell = titleRow.createCell(0)
        titleCell.setCellValue("üî• –ê–ù–ê–õ–ò–ó –í–û–ü–†–û–°–û–í")
        titleCell.cellStyle = titleStyle
        sheet.addMergedRegion(CellRangeAddress(0, 0, 0, 4))
        
        rowNum++
        
        // –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        val heatmapTitleRow = sheet.createRow(rowNum++)
        val heatmapTitleCell = heatmapTitleRow.createCell(0)
        heatmapTitleCell.setCellValue("üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
        heatmapTitleCell.cellStyle = titleStyle
        sheet.addMergedRegion(CellRangeAddress(rowNum - 1, rowNum - 1, 0, 4))
        
        rowNum++
        
        val heatmapHeaderRow = sheet.createRow(rowNum++)
        val heatmapHeaders = listOf("–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–í—Å–µ–≥–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏", "–°—Ç–∞—Ç—É—Å")
        heatmapHeaders.forEachIndexed { index, header ->
            val cell = heatmapHeaderRow.createCell(index)
            cell.setCellValue(header)
            cell.cellStyle = headerStyle
        }
        
        val questionHeatmap = statistics["questionHeatmap"] as? List<Map<String, Any>> ?: emptyList()
        questionHeatmap.forEach { question ->
            val row = sheet.createRow(rowNum++)
            
            val questionNum = question["question"] as? Int ?: 0
            val correctAnswers = question["correctAnswers"] as? Int ?: 0
            val totalAnswers = question["totalAnswers"] as? Int ?: 0
            val successRate = question["successRate"] as? Double ?: 0.0
            
            val status = when {
                successRate >= 80 -> "–û—Ç–ª–∏—á–Ω–æ"
                successRate >= 60 -> "–•–æ—Ä–æ—à–æ"
                successRate >= 40 -> "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                successRate >= 20 -> "–ü–ª–æ—Ö–æ"
                else -> "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ"
            }
            
            row.createCell(0).apply { setCellValue(questionNum.toDouble()); cellStyle = dataStyle }
            row.createCell(1).apply { setCellValue(correctAnswers.toDouble()); cellStyle = dataStyle }
            row.createCell(2).apply { setCellValue(totalAnswers.toDouble()); cellStyle = dataStyle }
            row.createCell(3).apply { setCellValue(String.format("%.1f%%", successRate)); cellStyle = dataStyle }
            row.createCell(4).apply { setCellValue(status); cellStyle = dataStyle }
        }
        
        rowNum += 2 // –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫
        
        // –°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        val relatedTitleRow = sheet.createRow(rowNum++)
        val relatedTitleCell = relatedTitleRow.createCell(0)
        relatedTitleCell.setCellValue("üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
        relatedTitleCell.cellStyle = titleStyle
        sheet.addMergedRegion(CellRangeAddress(rowNum - 1, rowNum - 1, 0, 3))
        
        rowNum++
        
        val relatedHeaderRow = sheet.createRow(rowNum++)
        val relatedHeaders = listOf("–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–û–±–∞ –æ—à–∏–±–æ—á–Ω—ã", "–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–±–æ—Ç")
        relatedHeaders.forEachIndexed { index, header ->
            val cell = relatedHeaderRow.createCell(index)
            cell.setCellValue(header)
            cell.cellStyle = headerStyle
        }
        
        val relatedErrors = statistics["relatedErrors"] as? List<Map<String, Any>> ?: emptyList()
        relatedErrors.forEach { error ->
            val row = sheet.createRow(rowNum++)
            
            val question1 = error["question1"] as? Int ?: 0
            val question2 = error["question2"] as? Int ?: 0
            val bothWrong = error["bothWrong"] as? Int ?: 0
            val correlation = error["correlation"] as? Double ?: 0.0
            
            row.createCell(0).apply { setCellValue(question1.toDouble()); cellStyle = dataStyle }
            row.createCell(1).apply { setCellValue(question2.toDouble()); cellStyle = dataStyle }
            row.createCell(2).apply { setCellValue(bothWrong.toDouble()); cellStyle = dataStyle }
            row.createCell(3).apply { setCellValue(String.format("%.1f%%", correlation * 100)); cellStyle = dataStyle }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        sheet.setColumnWidth(0, 1500) // –í–æ–ø—Ä–æ—Å
        sheet.setColumnWidth(1, 2000) // –ü—Ä–∞–≤–∏–ª—å–Ω–æ
        sheet.setColumnWidth(2, 2000) // –í—Å–µ–≥–æ
        sheet.setColumnWidth(3, 3000) // –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        sheet.setColumnWidth(4, 4000) // –°—Ç–∞—Ç—É—Å - —à–∏—Ä–µ
    }
    
    private fun createChartsSheet(workbook: Workbook, reportsManager: ReportsManager, headerStyle: CellStyle, dataStyle: CellStyle, titleStyle: CellStyle) {
        val sheet = workbook.createSheet("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        val statistics = reportsManager.getStatistics()
        
        var rowNum = 0
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        val titleRow = sheet.createRow(rowNum++)
        val titleCell = titleRow.createCell(0)
        titleCell.setCellValue("üìà –î–ê–ù–ù–´–ï –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í")
        titleCell.cellStyle = titleStyle
        sheet.addMergedRegion(CellRangeAddress(0, 0, 0, 4))
        
        rowNum++
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        val gradeDistribution = statistics["gradeDistribution"] as? Map<Int, Int> ?: emptyMap()
        val totalWorks = statistics["totalWorks"] as? Int ?: 0
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –æ—Ü–µ–Ω–æ–∫
        val chartDataRow = sheet.createRow(rowNum++)
        chartDataRow.createCell(0).setCellValue("–û—Ü–µ–Ω–∫–∞")
        chartDataRow.createCell(1).setCellValue("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        chartDataRow.createCell(2).setCellValue("–ü—Ä–æ—Ü–µ–Ω—Ç")
        
        gradeDistribution.entries.sortedBy { it.key }.forEach { (grade, count) ->
            val percentage = if (totalWorks > 0) (count.toDouble() / totalWorks * 100) else 0.0
            val row = sheet.createRow(rowNum++)
            
            row.createCell(0).setCellValue("–û—Ü–µ–Ω–∫–∞ $grade")
            row.createCell(1).setCellValue(count.toDouble())
            row.createCell(2).setCellValue(percentage)
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        sheet.setColumnWidth(0, 2000) // –û—Ü–µ–Ω–∫–∞
        sheet.setColumnWidth(1, 2000) // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        sheet.setColumnWidth(2, 2000) // –ü—Ä–æ—Ü–µ–Ω—Ç
    }
} 